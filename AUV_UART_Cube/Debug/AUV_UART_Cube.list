
AUV_UART_Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08003b60  08003b60  00013b60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c68  08003c68  00013c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08003c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  7 .bss          00000174  20000070  20000070  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001e4  200001e4  00020070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016d0d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b53  00000000  00000000  00036dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000810b  00000000  00000000  00039900  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a80  00000000  00000000  00041a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e98  00000000  00000000  00042490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000620b  00000000  00000000  00043328  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000041ea  00000000  00000000  00049533  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004d71d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002408  00000000  00000000  0004d79c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000024  00000000  00000000  0004fba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000004e  00000000  00000000  0004fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b48 	.word	0x08003b48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003b48 	.word	0x08003b48

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_d2f>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a1c:	bf24      	itt	cs
 8000a1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a26:	d90d      	bls.n	8000a44 <__aeabi_d2f+0x30>
 8000a28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a48:	d121      	bne.n	8000a8e <__aeabi_d2f+0x7a>
 8000a4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a4e:	bfbc      	itt	lt
 8000a50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a54:	4770      	bxlt	lr
 8000a56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a5e:	f1c2 0218 	rsb	r2, r2, #24
 8000a62:	f1c2 0c20 	rsb	ip, r2, #32
 8000a66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a6e:	bf18      	it	ne
 8000a70:	f040 0001 	orrne.w	r0, r0, #1
 8000a74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a80:	ea40 000c 	orr.w	r0, r0, ip
 8000a84:	fa23 f302 	lsr.w	r3, r3, r2
 8000a88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a8c:	e7cc      	b.n	8000a28 <__aeabi_d2f+0x14>
 8000a8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a92:	d107      	bne.n	8000aa4 <__aeabi_d2f+0x90>
 8000a94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a98:	bf1e      	ittt	ne
 8000a9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aa2:	4770      	bxne	lr
 8000aa4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_InitTick+0x3c>)
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_InitTick+0x40>)
{
 8000aba:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	7818      	ldrb	r0, [r3, #0]
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ac6:	6810      	ldr	r0, [r2, #0]
 8000ac8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000acc:	f000 f8a0 	bl	8000c10 <HAL_SYSTICK_Config>
 8000ad0:	4604      	mov	r4, r0
 8000ad2:	b958      	cbnz	r0, 8000aec <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad4:	2d0f      	cmp	r5, #15
 8000ad6:	d809      	bhi.n	8000aec <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	4602      	mov	r2, r0
 8000ada:	4629      	mov	r1, r5
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f000 f856 	bl	8000b90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <HAL_InitTick+0x44>)
 8000ae6:	4620      	mov	r0, r4
 8000ae8:	601d      	str	r5, [r3, #0]
 8000aea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000aec:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000aee:	bd38      	pop	{r3, r4, r5, pc}
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_Init+0x20>)
{
 8000afe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	6813      	ldr	r3, [r2, #0]
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f82f 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff ffd0 	bl	8000ab4 <HAL_InitTick>
  HAL_MspInit();
 8000b14:	f002 f9ca 	bl	8002eac <HAL_MspInit>
}
 8000b18:	2000      	movs	r0, #0
 8000b1a:	bd08      	pop	{r3, pc}
 8000b1c:	40022000 	.word	0x40022000

08000b20 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <HAL_IncTick+0x10>)
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <HAL_IncTick+0x14>)
 8000b24:	6811      	ldr	r1, [r2, #0]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	440b      	add	r3, r1
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200000a0 	.word	0x200000a0
 8000b34:	20000000 	.word	0x20000000

08000b38 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000b38:	4b01      	ldr	r3, [pc, #4]	; (8000b40 <HAL_GetTick+0x8>)
 8000b3a:	6818      	ldr	r0, [r3, #0]
}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	200000a0 	.word	0x200000a0

08000b44 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b44:	b538      	push	{r3, r4, r5, lr}
 8000b46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b48:	f7ff fff6 	bl	8000b38 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4e:	bf1c      	itt	ne
 8000b50:	4b05      	ldrne	r3, [pc, #20]	; (8000b68 <HAL_Delay+0x24>)
 8000b52:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000b54:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000b56:	bf18      	it	ne
 8000b58:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b5a:	f7ff ffed 	bl	8000b38 <HAL_GetTick>
 8000b5e:	1b40      	subs	r0, r0, r5
 8000b60:	4284      	cmp	r4, r0
 8000b62:	d8fa      	bhi.n	8000b5a <HAL_Delay+0x16>
  {
  }
}
 8000b64:	bd38      	pop	{r3, r4, r5, pc}
 8000b66:	bf00      	nop
 8000b68:	20000000 	.word	0x20000000

08000b6c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b6e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b74:	041b      	lsls	r3, r3, #16
 8000b76:	0c1b      	lsrs	r3, r3, #16
 8000b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b7c:	0200      	lsls	r0, r0, #8
 8000b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b82:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b86:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b88:	60d3      	str	r3, [r2, #12]
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b92:	b530      	push	{r4, r5, lr}
 8000b94:	68dc      	ldr	r4, [r3, #12]
 8000b96:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	bf28      	it	cs
 8000ba4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 0501 	mov.w	r5, #1
 8000bac:	fa05 f303 	lsl.w	r3, r5, r3
 8000bb0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb4:	bf8c      	ite	hi
 8000bb6:	3c03      	subhi	r4, #3
 8000bb8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bba:	4019      	ands	r1, r3
 8000bbc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbe:	fa05 f404 	lsl.w	r4, r5, r4
 8000bc2:	3c01      	subs	r4, #1
 8000bc4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000bc6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	ea42 0201 	orr.w	r2, r2, r1
 8000bcc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	bfaf      	iteee	ge
 8000bd2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	f000 000f 	andlt.w	r0, r0, #15
 8000bda:	4b06      	ldrlt	r3, [pc, #24]	; (8000bf4 <HAL_NVIC_SetPriority+0x64>)
 8000bdc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	bfa5      	ittet	ge
 8000be0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000be4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000bec:	bd30      	pop	{r4, r5, pc}
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00
 8000bf4:	e000ed14 	.word	0xe000ed14

08000bf8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bf8:	0942      	lsrs	r2, r0, #5
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f000 001f 	and.w	r0, r0, #31
 8000c00:	fa03 f000 	lsl.w	r0, r3, r0
 8000c04:	4b01      	ldr	r3, [pc, #4]	; (8000c0c <HAL_NVIC_EnableIRQ+0x14>)
 8000c06:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c10:	3801      	subs	r0, #1
 8000c12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c16:	d20a      	bcs.n	8000c2e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	21f0      	movs	r1, #240	; 0xf0
 8000c20:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c24:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c26:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c2e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c3c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000c40:	2a02      	cmp	r2, #2
{  
 8000c42:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c44:	d003      	beq.n	8000c4e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c46:	2204      	movs	r2, #4
 8000c48:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c4e:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c50:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c52:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000c54:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c56:	f021 010e 	bic.w	r1, r1, #14
 8000c5a:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c5c:	6811      	ldr	r1, [r2, #0]
 8000c5e:	f021 0101 	bic.w	r1, r1, #1
 8000c62:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c64:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000c66:	2101      	movs	r1, #1
 8000c68:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6c:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000c6e:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000c70:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000c74:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000c78:	b113      	cbz	r3, 8000c80 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000c7a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	bd10      	pop	{r4, pc}
 8000c80:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000c82:	bd10      	pop	{r4, pc}

08000c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c88:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8c:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000e20 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c90:	4a61      	ldr	r2, [pc, #388]	; (8000e18 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000c92:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c94:	fa38 f403 	lsrs.w	r4, r8, r3
 8000c98:	d102      	bne.n	8000ca0 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000c9a:	b003      	add	sp, #12
 8000c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ca0:	f04f 0e01 	mov.w	lr, #1
 8000ca4:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000ca8:	ea18 060e 	ands.w	r6, r8, lr
 8000cac:	f000 80a6 	beq.w	8000dfc <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cb0:	684c      	ldr	r4, [r1, #4]
 8000cb2:	f024 0710 	bic.w	r7, r4, #16
 8000cb6:	2f02      	cmp	r7, #2
 8000cb8:	d116      	bne.n	8000ce8 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000cba:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000cbe:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cc2:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000cc6:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cca:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000cce:	f04f 0c0f 	mov.w	ip, #15
 8000cd2:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000cd6:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cda:	690d      	ldr	r5, [r1, #16]
 8000cdc:	fa05 f50b 	lsl.w	r5, r5, fp
 8000ce0:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000ce4:	f8ca 5020 	str.w	r5, [sl, #32]
 8000ce8:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cec:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000cee:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf2:	fa05 f50a 	lsl.w	r5, r5, sl
 8000cf6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cf8:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cfc:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d00:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d04:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d06:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d0a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000d0c:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d10:	d811      	bhi.n	8000d36 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000d12:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d14:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d18:	68cf      	ldr	r7, [r1, #12]
 8000d1a:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000d1e:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000d22:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d24:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d26:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d2a:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000d2e:	409f      	lsls	r7, r3
 8000d30:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000d34:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d36:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d38:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d3a:	688f      	ldr	r7, [r1, #8]
 8000d3c:	fa07 f70a 	lsl.w	r7, r7, sl
 8000d40:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000d42:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d44:	00e5      	lsls	r5, r4, #3
 8000d46:	d559      	bpl.n	8000dfc <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d48:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000d4c:	f045 0501 	orr.w	r5, r5, #1
 8000d50:	f8c9 5018 	str.w	r5, [r9, #24]
 8000d54:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000d58:	f023 0703 	bic.w	r7, r3, #3
 8000d5c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000d60:	f005 0501 	and.w	r5, r5, #1
 8000d64:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000d68:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d6a:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000d70:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d72:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000d76:	f04f 0e0f 	mov.w	lr, #15
 8000d7a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d7e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d82:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d86:	d03b      	beq.n	8000e00 <HAL_GPIO_Init+0x17c>
 8000d88:	4d24      	ldr	r5, [pc, #144]	; (8000e1c <HAL_GPIO_Init+0x198>)
 8000d8a:	42a8      	cmp	r0, r5
 8000d8c:	d03a      	beq.n	8000e04 <HAL_GPIO_Init+0x180>
 8000d8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d92:	42a8      	cmp	r0, r5
 8000d94:	d038      	beq.n	8000e08 <HAL_GPIO_Init+0x184>
 8000d96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d9a:	42a8      	cmp	r0, r5
 8000d9c:	d036      	beq.n	8000e0c <HAL_GPIO_Init+0x188>
 8000d9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000da2:	42a8      	cmp	r0, r5
 8000da4:	d034      	beq.n	8000e10 <HAL_GPIO_Init+0x18c>
 8000da6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000daa:	42a8      	cmp	r0, r5
 8000dac:	d032      	beq.n	8000e14 <HAL_GPIO_Init+0x190>
 8000dae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000db2:	42a8      	cmp	r0, r5
 8000db4:	bf14      	ite	ne
 8000db6:	2507      	movne	r5, #7
 8000db8:	2506      	moveq	r5, #6
 8000dba:	fa05 f50c 	lsl.w	r5, r5, ip
 8000dbe:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000dc2:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000dc4:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000dc6:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000dcc:	bf0c      	ite	eq
 8000dce:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000dd0:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000dd2:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000dd4:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dd6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000dda:	bf0c      	ite	eq
 8000ddc:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000dde:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000de0:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000de2:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000de4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000de8:	bf0c      	ite	eq
 8000dea:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000dec:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000dee:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000df0:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000df4:	bf54      	ite	pl
 8000df6:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000df8:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000dfa:	60d5      	str	r5, [r2, #12]
    position++;
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	e749      	b.n	8000c94 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e00:	2500      	movs	r5, #0
 8000e02:	e7da      	b.n	8000dba <HAL_GPIO_Init+0x136>
 8000e04:	2501      	movs	r5, #1
 8000e06:	e7d8      	b.n	8000dba <HAL_GPIO_Init+0x136>
 8000e08:	2502      	movs	r5, #2
 8000e0a:	e7d6      	b.n	8000dba <HAL_GPIO_Init+0x136>
 8000e0c:	2503      	movs	r5, #3
 8000e0e:	e7d4      	b.n	8000dba <HAL_GPIO_Init+0x136>
 8000e10:	2504      	movs	r5, #4
 8000e12:	e7d2      	b.n	8000dba <HAL_GPIO_Init+0x136>
 8000e14:	2505      	movs	r5, #5
 8000e16:	e7d0      	b.n	8000dba <HAL_GPIO_Init+0x136>
 8000e18:	40010400 	.word	0x40010400
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e24:	b10a      	cbz	r2, 8000e2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e26:	6181      	str	r1, [r0, #24]
 8000e28:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e2a:	6281      	str	r1, [r0, #40]	; 0x28
 8000e2c:	4770      	bx	lr
	...

08000e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e30:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e34:	4605      	mov	r5, r0
 8000e36:	b918      	cbnz	r0, 8000e40 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000e38:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000e3a:	b002      	add	sp, #8
 8000e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e40:	6803      	ldr	r3, [r0, #0]
 8000e42:	07df      	lsls	r7, r3, #31
 8000e44:	d411      	bmi.n	8000e6a <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e46:	682b      	ldr	r3, [r5, #0]
 8000e48:	079e      	lsls	r6, r3, #30
 8000e4a:	f100 8088 	bmi.w	8000f5e <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e4e:	682b      	ldr	r3, [r5, #0]
 8000e50:	071c      	lsls	r4, r3, #28
 8000e52:	f100 80fc 	bmi.w	800104e <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e56:	682b      	ldr	r3, [r5, #0]
 8000e58:	0758      	lsls	r0, r3, #29
 8000e5a:	f100 8145 	bmi.w	80010e8 <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e5e:	69aa      	ldr	r2, [r5, #24]
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f040 81dc 	bne.w	800121e <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 8000e66:	2000      	movs	r0, #0
 8000e68:	e7e7      	b.n	8000e3a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e6a:	4cbd      	ldr	r4, [pc, #756]	; (8001160 <HAL_RCC_OscConfig+0x330>)
 8000e6c:	6863      	ldr	r3, [r4, #4]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	d00a      	beq.n	8000e8c <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e76:	6863      	ldr	r3, [r4, #4]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b08      	cmp	r3, #8
 8000e7e:	d119      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x84>
 8000e80:	6863      	ldr	r3, [r4, #4]
 8000e82:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e8a:	d113      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e90:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e94:	6821      	ldr	r1, [r4, #0]
 8000e96:	fa93 f3a3 	rbit	r3, r3
 8000e9a:	fab3 f383 	clz	r3, r3
 8000e9e:	f003 031f 	and.w	r3, r3, #31
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	420b      	tst	r3, r1
 8000eaa:	d0cc      	beq.n	8000e46 <HAL_RCC_OscConfig+0x16>
 8000eac:	686b      	ldr	r3, [r5, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1c9      	bne.n	8000e46 <HAL_RCC_OscConfig+0x16>
 8000eb2:	e7c1      	b.n	8000e38 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb4:	686b      	ldr	r3, [r5, #4]
 8000eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eba:	d11e      	bne.n	8000efa <HAL_RCC_OscConfig+0xca>
 8000ebc:	6823      	ldr	r3, [r4, #0]
 8000ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fe38 	bl	8000b38 <HAL_GetTick>
 8000ec8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000ecc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ece:	2701      	movs	r7, #1
 8000ed0:	fa96 f3a6 	rbit	r3, r6
 8000ed4:	6822      	ldr	r2, [r4, #0]
 8000ed6:	fa96 f3a6 	rbit	r3, r6
 8000eda:	fab3 f383 	clz	r3, r3
 8000ede:	f003 031f 	and.w	r3, r3, #31
 8000ee2:	fa07 f303 	lsl.w	r3, r7, r3
 8000ee6:	4213      	tst	r3, r2
 8000ee8:	d1ad      	bne.n	8000e46 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eea:	f7ff fe25 	bl	8000b38 <HAL_GetTick>
 8000eee:	eba0 0008 	sub.w	r0, r0, r8
 8000ef2:	2864      	cmp	r0, #100	; 0x64
 8000ef4:	d9ec      	bls.n	8000ed0 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	e79f      	b.n	8000e3a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efa:	bb0b      	cbnz	r3, 8000f40 <HAL_RCC_OscConfig+0x110>
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f02:	6023      	str	r3, [r4, #0]
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fe14 	bl	8000b38 <HAL_GetTick>
 8000f10:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000f14:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f16:	2701      	movs	r7, #1
 8000f18:	fa96 f3a6 	rbit	r3, r6
 8000f1c:	6822      	ldr	r2, [r4, #0]
 8000f1e:	fa96 f3a6 	rbit	r3, r6
 8000f22:	fab3 f383 	clz	r3, r3
 8000f26:	f003 031f 	and.w	r3, r3, #31
 8000f2a:	fa07 f303 	lsl.w	r3, r7, r3
 8000f2e:	4213      	tst	r3, r2
 8000f30:	d089      	beq.n	8000e46 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f32:	f7ff fe01 	bl	8000b38 <HAL_GetTick>
 8000f36:	eba0 0008 	sub.w	r0, r0, r8
 8000f3a:	2864      	cmp	r0, #100	; 0x64
 8000f3c:	d9ec      	bls.n	8000f18 <HAL_RCC_OscConfig+0xe8>
 8000f3e:	e7da      	b.n	8000ef6 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	d103      	bne.n	8000f50 <HAL_RCC_OscConfig+0x120>
 8000f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4c:	6023      	str	r3, [r4, #0]
 8000f4e:	e7b5      	b.n	8000ebc <HAL_RCC_OscConfig+0x8c>
 8000f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f54:	6023      	str	r3, [r4, #0]
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5c:	e7b1      	b.n	8000ec2 <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f5e:	4c80      	ldr	r4, [pc, #512]	; (8001160 <HAL_RCC_OscConfig+0x330>)
 8000f60:	6863      	ldr	r3, [r4, #4]
 8000f62:	f013 0f0c 	tst.w	r3, #12
 8000f66:	d00a      	beq.n	8000f7e <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f68:	6863      	ldr	r3, [r4, #4]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
 8000f6e:	2b08      	cmp	r3, #8
 8000f70:	d125      	bne.n	8000fbe <HAL_RCC_OscConfig+0x18e>
 8000f72:	6863      	ldr	r3, [r4, #4]
 8000f74:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f7c:	d11f      	bne.n	8000fbe <HAL_RCC_OscConfig+0x18e>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f84:	6821      	ldr	r1, [r4, #0]
 8000f86:	fa93 f3a3 	rbit	r3, r3
 8000f8a:	fab3 f383 	clz	r3, r3
 8000f8e:	f003 031f 	and.w	r3, r3, #31
 8000f92:	2201      	movs	r2, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	420b      	tst	r3, r1
 8000f9a:	d003      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x174>
 8000f9c:	68eb      	ldr	r3, [r5, #12]
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	f47f af4a 	bne.w	8000e38 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa4:	6821      	ldr	r1, [r4, #0]
 8000fa6:	23f8      	movs	r3, #248	; 0xf8
 8000fa8:	fa93 f3a3 	rbit	r3, r3
 8000fac:	fab3 f283 	clz	r2, r3
 8000fb0:	692b      	ldr	r3, [r5, #16]
 8000fb2:	4093      	lsls	r3, r2
 8000fb4:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	6023      	str	r3, [r4, #0]
 8000fbc:	e747      	b.n	8000e4e <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fbe:	68ea      	ldr	r2, [r5, #12]
 8000fc0:	2601      	movs	r6, #1
 8000fc2:	b30a      	cbz	r2, 8001008 <HAL_RCC_OscConfig+0x1d8>
 8000fc4:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000fc8:	fab3 f383 	clz	r3, r3
 8000fcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	2702      	movs	r7, #2
 8000fd8:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000fda:	f7ff fdad 	bl	8000b38 <HAL_GetTick>
 8000fde:	4680      	mov	r8, r0
 8000fe0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe4:	6822      	ldr	r2, [r4, #0]
 8000fe6:	fa97 f3a7 	rbit	r3, r7
 8000fea:	fab3 f383 	clz	r3, r3
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	fa06 f303 	lsl.w	r3, r6, r3
 8000ff6:	4213      	tst	r3, r2
 8000ff8:	d1d4      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ffa:	f7ff fd9d 	bl	8000b38 <HAL_GetTick>
 8000ffe:	eba0 0008 	sub.w	r0, r0, r8
 8001002:	2802      	cmp	r0, #2
 8001004:	d9ec      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x1b0>
 8001006:	e776      	b.n	8000ef6 <HAL_RCC_OscConfig+0xc6>
 8001008:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800100c:	fab3 f383 	clz	r3, r3
 8001010:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001014:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	2702      	movs	r7, #2
 800101c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800101e:	f7ff fd8b 	bl	8000b38 <HAL_GetTick>
 8001022:	4680      	mov	r8, r0
 8001024:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001028:	6822      	ldr	r2, [r4, #0]
 800102a:	fa97 f3a7 	rbit	r3, r7
 800102e:	fab3 f383 	clz	r3, r3
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	fa06 f303 	lsl.w	r3, r6, r3
 800103a:	4213      	tst	r3, r2
 800103c:	f43f af07 	beq.w	8000e4e <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001040:	f7ff fd7a 	bl	8000b38 <HAL_GetTick>
 8001044:	eba0 0008 	sub.w	r0, r0, r8
 8001048:	2802      	cmp	r0, #2
 800104a:	d9eb      	bls.n	8001024 <HAL_RCC_OscConfig+0x1f4>
 800104c:	e753      	b.n	8000ef6 <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800104e:	696a      	ldr	r2, [r5, #20]
 8001050:	4e43      	ldr	r6, [pc, #268]	; (8001160 <HAL_RCC_OscConfig+0x330>)
 8001052:	4944      	ldr	r1, [pc, #272]	; (8001164 <HAL_RCC_OscConfig+0x334>)
 8001054:	2401      	movs	r4, #1
 8001056:	b31a      	cbz	r2, 80010a0 <HAL_RCC_OscConfig+0x270>
 8001058:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800105c:	fab3 f383 	clz	r3, r3
 8001060:	440b      	add	r3, r1
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	2702      	movs	r7, #2
 8001066:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001068:	f7ff fd66 	bl	8000b38 <HAL_GetTick>
 800106c:	4680      	mov	r8, r0
 800106e:	fa97 f3a7 	rbit	r3, r7
 8001072:	fa97 f3a7 	rbit	r3, r7
 8001076:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800107a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800107c:	fa97 f3a7 	rbit	r3, r7
 8001080:	fab3 f383 	clz	r3, r3
 8001084:	f003 031f 	and.w	r3, r3, #31
 8001088:	fa04 f303 	lsl.w	r3, r4, r3
 800108c:	4213      	tst	r3, r2
 800108e:	f47f aee2 	bne.w	8000e56 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001092:	f7ff fd51 	bl	8000b38 <HAL_GetTick>
 8001096:	eba0 0008 	sub.w	r0, r0, r8
 800109a:	2802      	cmp	r0, #2
 800109c:	d9e7      	bls.n	800106e <HAL_RCC_OscConfig+0x23e>
 800109e:	e72a      	b.n	8000ef6 <HAL_RCC_OscConfig+0xc6>
 80010a0:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80010a4:	fab3 f383 	clz	r3, r3
 80010a8:	440b      	add	r3, r1
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	2702      	movs	r7, #2
 80010ae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80010b0:	f7ff fd42 	bl	8000b38 <HAL_GetTick>
 80010b4:	4680      	mov	r8, r0
 80010b6:	fa97 f3a7 	rbit	r3, r7
 80010ba:	fa97 f3a7 	rbit	r3, r7
 80010be:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80010c4:	fa97 f3a7 	rbit	r3, r7
 80010c8:	fab3 f383 	clz	r3, r3
 80010cc:	f003 031f 	and.w	r3, r3, #31
 80010d0:	fa04 f303 	lsl.w	r3, r4, r3
 80010d4:	4213      	tst	r3, r2
 80010d6:	f43f aebe 	beq.w	8000e56 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010da:	f7ff fd2d 	bl	8000b38 <HAL_GetTick>
 80010de:	eba0 0008 	sub.w	r0, r0, r8
 80010e2:	2802      	cmp	r0, #2
 80010e4:	d9e7      	bls.n	80010b6 <HAL_RCC_OscConfig+0x286>
 80010e6:	e706      	b.n	8000ef6 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010e8:	4c1d      	ldr	r4, [pc, #116]	; (8001160 <HAL_RCC_OscConfig+0x330>)
 80010ea:	69e3      	ldr	r3, [r4, #28]
 80010ec:	00d9      	lsls	r1, r3, #3
 80010ee:	d434      	bmi.n	800115a <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f0:	69e3      	ldr	r3, [r4, #28]
 80010f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f6:	61e3      	str	r3, [r4, #28]
 80010f8:	69e3      	ldr	r3, [r4, #28]
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001102:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001104:	4f18      	ldr	r7, [pc, #96]	; (8001168 <HAL_RCC_OscConfig+0x338>)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	05da      	lsls	r2, r3, #23
 800110a:	d52f      	bpl.n	800116c <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110c:	68ab      	ldr	r3, [r5, #8]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d13d      	bne.n	800118e <HAL_RCC_OscConfig+0x35e>
 8001112:	6a23      	ldr	r3, [r4, #32]
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800111a:	f7ff fd0d 	bl	8000b38 <HAL_GetTick>
 800111e:	2702      	movs	r7, #2
 8001120:	4682      	mov	sl, r0
 8001122:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001124:	f04f 0801 	mov.w	r8, #1
 8001128:	fa97 f3a7 	rbit	r3, r7
 800112c:	fa97 f3a7 	rbit	r3, r7
 8001130:	2b00      	cmp	r3, #0
 8001132:	d06c      	beq.n	800120e <HAL_RCC_OscConfig+0x3de>
 8001134:	6a22      	ldr	r2, [r4, #32]
 8001136:	fa99 f3a9 	rbit	r3, r9
 800113a:	fab3 f383 	clz	r3, r3
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	fa08 f303 	lsl.w	r3, r8, r3
 8001146:	4213      	tst	r3, r2
 8001148:	d058      	beq.n	80011fc <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 800114a:	2e00      	cmp	r6, #0
 800114c:	f43f ae87 	beq.w	8000e5e <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001150:	69e3      	ldr	r3, [r4, #28]
 8001152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001156:	61e3      	str	r3, [r4, #28]
 8001158:	e681      	b.n	8000e5e <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 800115a:	2600      	movs	r6, #0
 800115c:	e7d2      	b.n	8001104 <HAL_RCC_OscConfig+0x2d4>
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000
 8001164:	10908120 	.word	0x10908120
 8001168:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001172:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001174:	f7ff fce0 	bl	8000b38 <HAL_GetTick>
 8001178:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	05db      	lsls	r3, r3, #23
 800117e:	d4c5      	bmi.n	800110c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001180:	f7ff fcda 	bl	8000b38 <HAL_GetTick>
 8001184:	eba0 0008 	sub.w	r0, r0, r8
 8001188:	2864      	cmp	r0, #100	; 0x64
 800118a:	d9f6      	bls.n	800117a <HAL_RCC_OscConfig+0x34a>
 800118c:	e6b3      	b.n	8000ef6 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800118e:	bb3b      	cbnz	r3, 80011e0 <HAL_RCC_OscConfig+0x3b0>
 8001190:	6a23      	ldr	r3, [r4, #32]
 8001192:	f023 0301 	bic.w	r3, r3, #1
 8001196:	6223      	str	r3, [r4, #32]
 8001198:	6a23      	ldr	r3, [r4, #32]
 800119a:	f023 0304 	bic.w	r3, r3, #4
 800119e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80011a0:	f7ff fcca 	bl	8000b38 <HAL_GetTick>
 80011a4:	2702      	movs	r7, #2
 80011a6:	4682      	mov	sl, r0
 80011a8:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011aa:	f04f 0801 	mov.w	r8, #1
 80011ae:	fa97 f3a7 	rbit	r3, r7
 80011b2:	fa97 f3a7 	rbit	r3, r7
 80011b6:	b373      	cbz	r3, 8001216 <HAL_RCC_OscConfig+0x3e6>
 80011b8:	6a22      	ldr	r2, [r4, #32]
 80011ba:	fa99 f3a9 	rbit	r3, r9
 80011be:	fab3 f383 	clz	r3, r3
 80011c2:	f003 031f 	and.w	r3, r3, #31
 80011c6:	fa08 f303 	lsl.w	r3, r8, r3
 80011ca:	4213      	tst	r3, r2
 80011cc:	d0bd      	beq.n	800114a <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ce:	f7ff fcb3 	bl	8000b38 <HAL_GetTick>
 80011d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80011d6:	eba0 000a 	sub.w	r0, r0, sl
 80011da:	4298      	cmp	r0, r3
 80011dc:	d9e7      	bls.n	80011ae <HAL_RCC_OscConfig+0x37e>
 80011de:	e68a      	b.n	8000ef6 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	6a23      	ldr	r3, [r4, #32]
 80011e4:	d103      	bne.n	80011ee <HAL_RCC_OscConfig+0x3be>
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	6223      	str	r3, [r4, #32]
 80011ec:	e791      	b.n	8001112 <HAL_RCC_OscConfig+0x2e2>
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	6223      	str	r3, [r4, #32]
 80011f4:	6a23      	ldr	r3, [r4, #32]
 80011f6:	f023 0304 	bic.w	r3, r3, #4
 80011fa:	e78d      	b.n	8001118 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011fc:	f7ff fc9c 	bl	8000b38 <HAL_GetTick>
 8001200:	f241 3388 	movw	r3, #5000	; 0x1388
 8001204:	eba0 000a 	sub.w	r0, r0, sl
 8001208:	4298      	cmp	r0, r3
 800120a:	d98d      	bls.n	8001128 <HAL_RCC_OscConfig+0x2f8>
 800120c:	e673      	b.n	8000ef6 <HAL_RCC_OscConfig+0xc6>
 800120e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001212:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001214:	e78f      	b.n	8001136 <HAL_RCC_OscConfig+0x306>
 8001216:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800121a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800121c:	e7cd      	b.n	80011ba <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800121e:	4c44      	ldr	r4, [pc, #272]	; (8001330 <HAL_RCC_OscConfig+0x500>)
 8001220:	6863      	ldr	r3, [r4, #4]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b08      	cmp	r3, #8
 8001228:	f43f ae06 	beq.w	8000e38 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800122c:	2a02      	cmp	r2, #2
 800122e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001232:	d158      	bne.n	80012e6 <HAL_RCC_OscConfig+0x4b6>
 8001234:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001238:	fab3 f383 	clz	r3, r3
 800123c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001240:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800124a:	f7ff fc75 	bl	8000b38 <HAL_GetTick>
 800124e:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001252:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001254:	2601      	movs	r6, #1
 8001256:	fa97 f3a7 	rbit	r3, r7
 800125a:	6822      	ldr	r2, [r4, #0]
 800125c:	fa97 f3a7 	rbit	r3, r7
 8001260:	fab3 f383 	clz	r3, r3
 8001264:	f003 031f 	and.w	r3, r3, #31
 8001268:	fa06 f303 	lsl.w	r3, r6, r3
 800126c:	4213      	tst	r3, r2
 800126e:	d133      	bne.n	80012d8 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001270:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001272:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001274:	f023 030f 	bic.w	r3, r3, #15
 8001278:	4313      	orrs	r3, r2
 800127a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800127c:	6862      	ldr	r2, [r4, #4]
 800127e:	6a2b      	ldr	r3, [r5, #32]
 8001280:	69e9      	ldr	r1, [r5, #28]
 8001282:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8001286:	430b      	orrs	r3, r1
 8001288:	4313      	orrs	r3, r2
 800128a:	6063      	str	r3, [r4, #4]
 800128c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001290:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001294:	fab3 f383 	clz	r3, r3
 8001298:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800129c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80012a6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80012a8:	f7ff fc46 	bl	8000b38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ac:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80012ae:	4607      	mov	r7, r0
 80012b0:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b4:	6822      	ldr	r2, [r4, #0]
 80012b6:	fa95 f3a5 	rbit	r3, r5
 80012ba:	fab3 f383 	clz	r3, r3
 80012be:	f003 031f 	and.w	r3, r3, #31
 80012c2:	fa06 f303 	lsl.w	r3, r6, r3
 80012c6:	4213      	tst	r3, r2
 80012c8:	f47f adcd 	bne.w	8000e66 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012cc:	f7ff fc34 	bl	8000b38 <HAL_GetTick>
 80012d0:	1bc0      	subs	r0, r0, r7
 80012d2:	2802      	cmp	r0, #2
 80012d4:	d9ec      	bls.n	80012b0 <HAL_RCC_OscConfig+0x480>
 80012d6:	e60e      	b.n	8000ef6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d8:	f7ff fc2e 	bl	8000b38 <HAL_GetTick>
 80012dc:	eba0 0008 	sub.w	r0, r0, r8
 80012e0:	2802      	cmp	r0, #2
 80012e2:	d9b8      	bls.n	8001256 <HAL_RCC_OscConfig+0x426>
 80012e4:	e607      	b.n	8000ef6 <HAL_RCC_OscConfig+0xc6>
 80012e6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80012ea:	fab3 f383 	clz	r3, r3
 80012ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012fc:	f7ff fc1c 	bl	8000b38 <HAL_GetTick>
 8001300:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001304:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001306:	2601      	movs	r6, #1
 8001308:	fa95 f3a5 	rbit	r3, r5
 800130c:	6822      	ldr	r2, [r4, #0]
 800130e:	fa95 f3a5 	rbit	r3, r5
 8001312:	fab3 f383 	clz	r3, r3
 8001316:	f003 031f 	and.w	r3, r3, #31
 800131a:	fa06 f303 	lsl.w	r3, r6, r3
 800131e:	4213      	tst	r3, r2
 8001320:	f43f ada1 	beq.w	8000e66 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff fc08 	bl	8000b38 <HAL_GetTick>
 8001328:	1bc0      	subs	r0, r0, r7
 800132a:	2802      	cmp	r0, #2
 800132c:	d9ec      	bls.n	8001308 <HAL_RCC_OscConfig+0x4d8>
 800132e:	e5e2      	b.n	8000ef6 <HAL_RCC_OscConfig+0xc6>
 8001330:	40021000 	.word	0x40021000

08001334 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001334:	4911      	ldr	r1, [pc, #68]	; (800137c <HAL_RCC_GetSysClockFreq+0x48>)
 8001336:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001338:	f003 020c 	and.w	r2, r3, #12
 800133c:	2a08      	cmp	r2, #8
 800133e:	d11a      	bne.n	8001376 <HAL_RCC_GetSysClockFreq+0x42>
 8001340:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001344:	fa92 f2a2 	rbit	r2, r2
 8001348:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800134a:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800134e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001350:	fa90 f0a0 	rbit	r0, r0
 8001354:	fab0 f080 	clz	r0, r0
 8001358:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800135c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001360:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001362:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001366:	4807      	ldr	r0, [pc, #28]	; (8001384 <HAL_RCC_GetSysClockFreq+0x50>)
 8001368:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <HAL_RCC_GetSysClockFreq+0x54>)
 800136c:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001370:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001372:	4348      	muls	r0, r1
 8001374:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001376:	4804      	ldr	r0, [pc, #16]	; (8001388 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000
 8001380:	08003b60 	.word	0x08003b60
 8001384:	08003b70 	.word	0x08003b70
 8001388:	007a1200 	.word	0x007a1200

0800138c <HAL_RCC_ClockConfig>:
{
 800138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001390:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001392:	4604      	mov	r4, r0
 8001394:	b910      	cbnz	r0, 800139c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001396:	2001      	movs	r0, #1
 8001398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800139c:	4a4c      	ldr	r2, [pc, #304]	; (80014d0 <HAL_RCC_ClockConfig+0x144>)
 800139e:	6813      	ldr	r3, [r2, #0]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	428b      	cmp	r3, r1
 80013a6:	d32e      	bcc.n	8001406 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a8:	6822      	ldr	r2, [r4, #0]
 80013aa:	0791      	lsls	r1, r2, #30
 80013ac:	d436      	bmi.n	800141c <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ae:	07d2      	lsls	r2, r2, #31
 80013b0:	d43c      	bmi.n	800142c <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013b2:	4a47      	ldr	r2, [pc, #284]	; (80014d0 <HAL_RCC_ClockConfig+0x144>)
 80013b4:	6813      	ldr	r3, [r2, #0]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	429d      	cmp	r5, r3
 80013bc:	d375      	bcc.n	80014aa <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013be:	6822      	ldr	r2, [r4, #0]
 80013c0:	4d44      	ldr	r5, [pc, #272]	; (80014d4 <HAL_RCC_ClockConfig+0x148>)
 80013c2:	f012 0f04 	tst.w	r2, #4
 80013c6:	d17c      	bne.n	80014c2 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c8:	0713      	lsls	r3, r2, #28
 80013ca:	d506      	bpl.n	80013da <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013cc:	686b      	ldr	r3, [r5, #4]
 80013ce:	6922      	ldr	r2, [r4, #16]
 80013d0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80013d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013d8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013da:	f7ff ffab 	bl	8001334 <HAL_RCC_GetSysClockFreq>
 80013de:	686b      	ldr	r3, [r5, #4]
 80013e0:	22f0      	movs	r2, #240	; 0xf0
 80013e2:	fa92 f2a2 	rbit	r2, r2
 80013e6:	fab2 f282 	clz	r2, r2
 80013ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013ee:	40d3      	lsrs	r3, r2
 80013f0:	4a39      	ldr	r2, [pc, #228]	; (80014d8 <HAL_RCC_ClockConfig+0x14c>)
 80013f2:	5cd3      	ldrb	r3, [r2, r3]
 80013f4:	40d8      	lsrs	r0, r3
 80013f6:	4b39      	ldr	r3, [pc, #228]	; (80014dc <HAL_RCC_ClockConfig+0x150>)
 80013f8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff fb5a 	bl	8000ab4 <HAL_InitTick>
  return HAL_OK;
 8001400:	2000      	movs	r0, #0
 8001402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001406:	6813      	ldr	r3, [r2, #0]
 8001408:	f023 0307 	bic.w	r3, r3, #7
 800140c:	430b      	orrs	r3, r1
 800140e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001410:	6813      	ldr	r3, [r2, #0]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	4299      	cmp	r1, r3
 8001418:	d1bd      	bne.n	8001396 <HAL_RCC_ClockConfig+0xa>
 800141a:	e7c5      	b.n	80013a8 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800141c:	492d      	ldr	r1, [pc, #180]	; (80014d4 <HAL_RCC_ClockConfig+0x148>)
 800141e:	68a0      	ldr	r0, [r4, #8]
 8001420:	684b      	ldr	r3, [r1, #4]
 8001422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001426:	4303      	orrs	r3, r0
 8001428:	604b      	str	r3, [r1, #4]
 800142a:	e7c0      	b.n	80013ae <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142c:	6862      	ldr	r2, [r4, #4]
 800142e:	4e29      	ldr	r6, [pc, #164]	; (80014d4 <HAL_RCC_ClockConfig+0x148>)
 8001430:	2a01      	cmp	r2, #1
 8001432:	d127      	bne.n	8001484 <HAL_RCC_ClockConfig+0xf8>
 8001434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001438:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143c:	6831      	ldr	r1, [r6, #0]
 800143e:	fa93 f3a3 	rbit	r3, r3
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001450:	d0a1      	beq.n	8001396 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001452:	6873      	ldr	r3, [r6, #4]
 8001454:	f023 0303 	bic.w	r3, r3, #3
 8001458:	431a      	orrs	r2, r3
 800145a:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 800145c:	f7ff fb6c 	bl	8000b38 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001460:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001464:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001466:	6873      	ldr	r3, [r6, #4]
 8001468:	6862      	ldr	r2, [r4, #4]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001472:	d09e      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001474:	f7ff fb60 	bl	8000b38 <HAL_GetTick>
 8001478:	1bc0      	subs	r0, r0, r7
 800147a:	4540      	cmp	r0, r8
 800147c:	d9f3      	bls.n	8001466 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 800147e:	2003      	movs	r0, #3
}
 8001480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001484:	2a02      	cmp	r2, #2
 8001486:	bf0c      	ite	eq
 8001488:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800148c:	2302      	movne	r3, #2
 800148e:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001492:	6830      	ldr	r0, [r6, #0]
 8001494:	fa93 f3a3 	rbit	r3, r3
 8001498:	fab3 f383 	clz	r3, r3
 800149c:	f003 031f 	and.w	r3, r3, #31
 80014a0:	2101      	movs	r1, #1
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	4203      	tst	r3, r0
 80014a8:	e7d2      	b.n	8001450 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	6813      	ldr	r3, [r2, #0]
 80014ac:	f023 0307 	bic.w	r3, r3, #7
 80014b0:	432b      	orrs	r3, r5
 80014b2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b4:	6813      	ldr	r3, [r2, #0]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	429d      	cmp	r5, r3
 80014bc:	f47f af6b 	bne.w	8001396 <HAL_RCC_ClockConfig+0xa>
 80014c0:	e77d      	b.n	80013be <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c2:	686b      	ldr	r3, [r5, #4]
 80014c4:	68e1      	ldr	r1, [r4, #12]
 80014c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014ca:	430b      	orrs	r3, r1
 80014cc:	606b      	str	r3, [r5, #4]
 80014ce:	e77b      	b.n	80013c8 <HAL_RCC_ClockConfig+0x3c>
 80014d0:	40022000 	.word	0x40022000
 80014d4:	40021000 	.word	0x40021000
 80014d8:	08003c16 	.word	0x08003c16
 80014dc:	20000008 	.word	0x20000008

080014e0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	fa92 f2a2 	rbit	r2, r2
 80014ec:	fab2 f282 	clz	r2, r2
 80014f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014f4:	40d3      	lsrs	r3, r2
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_RCC_GetPCLK1Freq+0x28>)
 80014f8:	5cd3      	ldrb	r3, [r2, r3]
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <HAL_RCC_GetPCLK1Freq+0x2c>)
 80014fc:	6810      	ldr	r0, [r2, #0]
}    
 80014fe:	40d8      	lsrs	r0, r3
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	08003c26 	.word	0x08003c26
 800150c:	20000008 	.word	0x20000008

08001510 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001512:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	fa92 f2a2 	rbit	r2, r2
 800151c:	fab2 f282 	clz	r2, r2
 8001520:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001524:	40d3      	lsrs	r3, r2
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001528:	5cd3      	ldrb	r3, [r2, r3]
 800152a:	4a04      	ldr	r2, [pc, #16]	; (800153c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800152c:	6810      	ldr	r0, [r2, #0]
} 
 800152e:	40d8      	lsrs	r0, r3
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000
 8001538:	08003c26 	.word	0x08003c26
 800153c:	20000008 	.word	0x20000008

08001540 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001540:	6803      	ldr	r3, [r0, #0]
{
 8001542:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001546:	03df      	lsls	r7, r3, #15
{
 8001548:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800154a:	d523      	bpl.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800154c:	4d9b      	ldr	r5, [pc, #620]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800154e:	69eb      	ldr	r3, [r5, #28]
 8001550:	00de      	lsls	r6, r3, #3
 8001552:	f100 80d7 	bmi.w	8001704 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	69eb      	ldr	r3, [r5, #28]
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	61eb      	str	r3, [r5, #28]
 800155e:	69eb      	ldr	r3, [r5, #28]
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001568:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156a:	4f95      	ldr	r7, [pc, #596]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	05d8      	lsls	r0, r3, #23
 8001570:	f140 80ca 	bpl.w	8001708 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001574:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001576:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800157a:	f040 80da 	bne.w	8001732 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800157e:	6a2b      	ldr	r3, [r5, #32]
 8001580:	6862      	ldr	r2, [r4, #4]
 8001582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001586:	4313      	orrs	r3, r2
 8001588:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800158a:	b11e      	cbz	r6, 8001594 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158c:	69eb      	ldr	r3, [r5, #28]
 800158e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001592:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001594:	6820      	ldr	r0, [r4, #0]
 8001596:	07c3      	lsls	r3, r0, #31
 8001598:	d506      	bpl.n	80015a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800159a:	4a88      	ldr	r2, [pc, #544]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800159c:	68a1      	ldr	r1, [r4, #8]
 800159e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015a0:	f023 0303 	bic.w	r3, r3, #3
 80015a4:	430b      	orrs	r3, r1
 80015a6:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80015a8:	0787      	lsls	r7, r0, #30
 80015aa:	d506      	bpl.n	80015ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80015ac:	4a83      	ldr	r2, [pc, #524]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015ae:	68e1      	ldr	r1, [r4, #12]
 80015b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80015b6:	430b      	orrs	r3, r1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80015ba:	0746      	lsls	r6, r0, #29
 80015bc:	d506      	bpl.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80015be:	4a7f      	ldr	r2, [pc, #508]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015c0:	6921      	ldr	r1, [r4, #16]
 80015c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015c4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80015c8:	430b      	orrs	r3, r1
 80015ca:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015cc:	0685      	lsls	r5, r0, #26
 80015ce:	d506      	bpl.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015d0:	4a7a      	ldr	r2, [pc, #488]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015d2:	69e1      	ldr	r1, [r4, #28]
 80015d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015d6:	f023 0310 	bic.w	r3, r3, #16
 80015da:	430b      	orrs	r3, r1
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80015de:	0381      	lsls	r1, r0, #14
 80015e0:	d506      	bpl.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80015e2:	4a76      	ldr	r2, [pc, #472]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015e4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80015e6:	6853      	ldr	r3, [r2, #4]
 80015e8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80015ec:	430b      	orrs	r3, r1
 80015ee:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80015f0:	0642      	lsls	r2, r0, #25
 80015f2:	d506      	bpl.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80015f4:	4a71      	ldr	r2, [pc, #452]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015f6:	6a21      	ldr	r1, [r4, #32]
 80015f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015fa:	f023 0320 	bic.w	r3, r3, #32
 80015fe:	430b      	orrs	r3, r1
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001602:	0343      	lsls	r3, r0, #13
 8001604:	d506      	bpl.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001606:	4a6d      	ldr	r2, [pc, #436]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001608:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800160a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800160c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001610:	430b      	orrs	r3, r1
 8001612:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001614:	0707      	lsls	r7, r0, #28
 8001616:	d506      	bpl.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001618:	4a68      	ldr	r2, [pc, #416]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800161a:	6961      	ldr	r1, [r4, #20]
 800161c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800161e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001622:	430b      	orrs	r3, r1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001626:	06c6      	lsls	r6, r0, #27
 8001628:	d506      	bpl.n	8001638 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800162a:	4a64      	ldr	r2, [pc, #400]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800162c:	69a1      	ldr	r1, [r4, #24]
 800162e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001630:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001634:	430b      	orrs	r3, r1
 8001636:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001638:	0585      	lsls	r5, r0, #22
 800163a:	d506      	bpl.n	800164a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800163c:	4a5f      	ldr	r2, [pc, #380]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800163e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001640:	6853      	ldr	r3, [r2, #4]
 8001642:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001646:	430b      	orrs	r3, r1
 8001648:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800164a:	0601      	lsls	r1, r0, #24
 800164c:	d506      	bpl.n	800165c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800164e:	4a5b      	ldr	r2, [pc, #364]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001650:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001652:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001654:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001658:	430b      	orrs	r3, r1
 800165a:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800165c:	05c2      	lsls	r2, r0, #23
 800165e:	d506      	bpl.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001660:	4a56      	ldr	r2, [pc, #344]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001662:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001664:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001666:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 800166a:	430b      	orrs	r3, r1
 800166c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800166e:	04c3      	lsls	r3, r0, #19
 8001670:	d506      	bpl.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001672:	4a52      	ldr	r2, [pc, #328]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001676:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800167c:	430b      	orrs	r3, r1
 800167e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001680:	0487      	lsls	r7, r0, #18
 8001682:	d506      	bpl.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001684:	4a4d      	ldr	r2, [pc, #308]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001686:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001688:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800168a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800168e:	430b      	orrs	r3, r1
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001692:	02c6      	lsls	r6, r0, #11
 8001694:	d506      	bpl.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001696:	4a49      	ldr	r2, [pc, #292]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001698:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800169a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800169c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016a0:	430b      	orrs	r3, r1
 80016a2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80016a4:	0285      	lsls	r5, r0, #10
 80016a6:	d506      	bpl.n	80016b6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80016a8:	4a44      	ldr	r2, [pc, #272]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80016aa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80016ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016ae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80016b2:	430b      	orrs	r3, r1
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80016b6:	0241      	lsls	r1, r0, #9
 80016b8:	d506      	bpl.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80016ba:	4a40      	ldr	r2, [pc, #256]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80016bc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80016be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016c4:	430b      	orrs	r3, r1
 80016c6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80016c8:	0202      	lsls	r2, r0, #8
 80016ca:	d506      	bpl.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80016cc:	4a3b      	ldr	r2, [pc, #236]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80016ce:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80016d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016d6:	430b      	orrs	r3, r1
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80016da:	01c3      	lsls	r3, r0, #7
 80016dc:	d506      	bpl.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80016de:	4a37      	ldr	r2, [pc, #220]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80016e0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80016e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016e8:	430b      	orrs	r3, r1
 80016ea:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80016ec:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80016f0:	d01c      	beq.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80016f2:	4a32      	ldr	r2, [pc, #200]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80016f4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80016f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016fc:	430b      	orrs	r3, r1
 80016fe:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001700:	2000      	movs	r0, #0
 8001702:	e013      	b.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8001704:	2600      	movs	r6, #0
 8001706:	e730      	b.n	800156a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001710:	f7ff fa12 	bl	8000b38 <HAL_GetTick>
 8001714:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	05d9      	lsls	r1, r3, #23
 800171a:	f53f af2b 	bmi.w	8001574 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171e:	f7ff fa0b 	bl	8000b38 <HAL_GetTick>
 8001722:	eba0 0008 	sub.w	r0, r0, r8
 8001726:	2864      	cmp	r0, #100	; 0x64
 8001728:	d9f5      	bls.n	8001716 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 800172a:	2003      	movs	r0, #3
}
 800172c:	b002      	add	sp, #8
 800172e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001732:	6862      	ldr	r2, [r4, #4]
 8001734:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001738:	4293      	cmp	r3, r2
 800173a:	f43f af20 	beq.w	800157e <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800173e:	6a29      	ldr	r1, [r5, #32]
 8001740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001744:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001748:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800174c:	f8df e074 	ldr.w	lr, [pc, #116]	; 80017c4 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001750:	fab2 f282 	clz	r2, r2
 8001754:	4472      	add	r2, lr
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	2701      	movs	r7, #1
 800175a:	6017      	str	r7, [r2, #0]
 800175c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	4473      	add	r3, lr
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800176c:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 800176e:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001770:	f57f af05 	bpl.w	800157e <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001774:	f7ff f9e0 	bl	8000b38 <HAL_GetTick>
 8001778:	f04f 0802 	mov.w	r8, #2
 800177c:	4682      	mov	sl, r0
 800177e:	46c1      	mov	r9, r8
 8001780:	fa98 f3a8 	rbit	r3, r8
 8001784:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001788:	b1a3      	cbz	r3, 80017b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800178a:	6a2a      	ldr	r2, [r5, #32]
 800178c:	fa99 f3a9 	rbit	r3, r9
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	f003 031f 	and.w	r3, r3, #31
 8001798:	fa07 f303 	lsl.w	r3, r7, r3
 800179c:	4213      	tst	r3, r2
 800179e:	f47f aeee 	bne.w	800157e <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a2:	f7ff f9c9 	bl	8000b38 <HAL_GetTick>
 80017a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80017aa:	eba0 000a 	sub.w	r0, r0, sl
 80017ae:	4298      	cmp	r0, r3
 80017b0:	d9e6      	bls.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80017b2:	e7ba      	b.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80017b4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80017ba:	e7e7      	b.n	800178c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40007000 	.word	0x40007000
 80017c4:	10908100 	.word	0x10908100

080017c8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017c8:	6803      	ldr	r3, [r0, #0]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	f042 0201 	orr.w	r2, r2, #1
 80017d0:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	f042 0201 	orr.w	r2, r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80017da:	2000      	movs	r0, #0
 80017dc:	4770      	bx	lr

080017de <HAL_TIM_PWM_MspInit>:
 80017de:	4770      	bx	lr

080017e0 <HAL_TIM_OC_DelayElapsedCallback>:
 80017e0:	4770      	bx	lr

080017e2 <HAL_TIM_IC_CaptureCallback>:
 80017e2:	4770      	bx	lr

080017e4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80017e4:	4770      	bx	lr

080017e6 <HAL_TIM_TriggerCallback>:
 80017e6:	4770      	bx	lr

080017e8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017e8:	6803      	ldr	r3, [r0, #0]
 80017ea:	691a      	ldr	r2, [r3, #16]
 80017ec:	0791      	lsls	r1, r2, #30
{
 80017ee:	b510      	push	{r4, lr}
 80017f0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017f2:	d50f      	bpl.n	8001814 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	0792      	lsls	r2, r2, #30
 80017f8:	d50c      	bpl.n	8001814 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80017fa:	f06f 0202 	mvn.w	r2, #2
 80017fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001800:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001802:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001804:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001806:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001808:	f000 8085 	beq.w	8001916 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800180c:	f7ff ffe9 	bl	80017e2 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001810:	2300      	movs	r3, #0
 8001812:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	0752      	lsls	r2, r2, #29
 800181a:	d510      	bpl.n	800183e <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	0750      	lsls	r0, r2, #29
 8001820:	d50d      	bpl.n	800183e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001822:	f06f 0204 	mvn.w	r2, #4
 8001826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001828:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800182a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800182c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001830:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001832:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001834:	d075      	beq.n	8001922 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001836:	f7ff ffd4 	bl	80017e2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800183a:	2300      	movs	r3, #0
 800183c:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800183e:	6823      	ldr	r3, [r4, #0]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	0711      	lsls	r1, r2, #28
 8001844:	d50f      	bpl.n	8001866 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	0712      	lsls	r2, r2, #28
 800184a:	d50c      	bpl.n	8001866 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800184c:	f06f 0208 	mvn.w	r2, #8
 8001850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001852:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001854:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001856:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001858:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800185a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800185c:	d067      	beq.n	800192e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800185e:	f7ff ffc0 	bl	80017e2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001862:	2300      	movs	r3, #0
 8001864:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	691a      	ldr	r2, [r3, #16]
 800186a:	06d0      	lsls	r0, r2, #27
 800186c:	d510      	bpl.n	8001890 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	06d1      	lsls	r1, r2, #27
 8001872:	d50d      	bpl.n	8001890 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001874:	f06f 0210 	mvn.w	r2, #16
 8001878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800187a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800187c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800187e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001882:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001884:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001886:	d058      	beq.n	800193a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001888:	f7ff ffab 	bl	80017e2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800188c:	2300      	movs	r3, #0
 800188e:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	07d2      	lsls	r2, r2, #31
 8001896:	d508      	bpl.n	80018aa <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	07d0      	lsls	r0, r2, #31
 800189c:	d505      	bpl.n	80018aa <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800189e:	f06f 0201 	mvn.w	r2, #1
 80018a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80018a4:	4620      	mov	r0, r4
 80018a6:	f001 f8c5 	bl	8002a34 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	691a      	ldr	r2, [r3, #16]
 80018ae:	0611      	lsls	r1, r2, #24
 80018b0:	d508      	bpl.n	80018c4 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	0612      	lsls	r2, r2, #24
 80018b6:	d505      	bpl.n	80018c4 <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80018b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80018be:	4620      	mov	r0, r4
 80018c0:	f000 fc65 	bl	800218e <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	05d0      	lsls	r0, r2, #23
 80018ca:	d508      	bpl.n	80018de <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	0611      	lsls	r1, r2, #24
 80018d0:	d505      	bpl.n	80018de <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80018d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80018d6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80018d8:	4620      	mov	r0, r4
 80018da:	f000 fc59 	bl	8002190 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	0652      	lsls	r2, r2, #25
 80018e4:	d508      	bpl.n	80018f8 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	0650      	lsls	r0, r2, #25
 80018ea:	d505      	bpl.n	80018f8 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80018ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80018f2:	4620      	mov	r0, r4
 80018f4:	f7ff ff77 	bl	80017e6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	0691      	lsls	r1, r2, #26
 80018fe:	d522      	bpl.n	8001946 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	0692      	lsls	r2, r2, #26
 8001904:	d51f      	bpl.n	8001946 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001906:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800190a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800190c:	611a      	str	r2, [r3, #16]
    }
  }
}
 800190e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001912:	f000 bc3b 	b.w	800218c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001916:	f7ff ff63 	bl	80017e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800191a:	4620      	mov	r0, r4
 800191c:	f7ff ff62 	bl	80017e4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001920:	e776      	b.n	8001810 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001922:	f7ff ff5d 	bl	80017e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001926:	4620      	mov	r0, r4
 8001928:	f7ff ff5c 	bl	80017e4 <HAL_TIM_PWM_PulseFinishedCallback>
 800192c:	e785      	b.n	800183a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800192e:	f7ff ff57 	bl	80017e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001932:	4620      	mov	r0, r4
 8001934:	f7ff ff56 	bl	80017e4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001938:	e793      	b.n	8001862 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800193a:	f7ff ff51 	bl	80017e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800193e:	4620      	mov	r0, r4
 8001940:	f7ff ff50 	bl	80017e4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001944:	e7a2      	b.n	800188c <HAL_TIM_IRQHandler+0xa4>
 8001946:	bd10      	pop	{r4, pc}

08001948 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001948:	4a32      	ldr	r2, [pc, #200]	; (8001a14 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 800194a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800194c:	4290      	cmp	r0, r2
 800194e:	d012      	beq.n	8001976 <TIM_Base_SetConfig+0x2e>
 8001950:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001954:	d00f      	beq.n	8001976 <TIM_Base_SetConfig+0x2e>
 8001956:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800195a:	4290      	cmp	r0, r2
 800195c:	d00b      	beq.n	8001976 <TIM_Base_SetConfig+0x2e>
 800195e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001962:	4290      	cmp	r0, r2
 8001964:	d007      	beq.n	8001976 <TIM_Base_SetConfig+0x2e>
 8001966:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800196a:	4290      	cmp	r0, r2
 800196c:	d003      	beq.n	8001976 <TIM_Base_SetConfig+0x2e>
 800196e:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8001972:	4290      	cmp	r0, r2
 8001974:	d115      	bne.n	80019a2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001976:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800197c:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800197e:	4a25      	ldr	r2, [pc, #148]	; (8001a14 <TIM_Base_SetConfig+0xcc>)
 8001980:	4290      	cmp	r0, r2
 8001982:	d01d      	beq.n	80019c0 <TIM_Base_SetConfig+0x78>
 8001984:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001988:	d01a      	beq.n	80019c0 <TIM_Base_SetConfig+0x78>
 800198a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800198e:	4290      	cmp	r0, r2
 8001990:	d016      	beq.n	80019c0 <TIM_Base_SetConfig+0x78>
 8001992:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001996:	4290      	cmp	r0, r2
 8001998:	d012      	beq.n	80019c0 <TIM_Base_SetConfig+0x78>
 800199a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800199e:	4290      	cmp	r0, r2
 80019a0:	d00e      	beq.n	80019c0 <TIM_Base_SetConfig+0x78>
 80019a2:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <TIM_Base_SetConfig+0xd0>)
 80019a4:	4290      	cmp	r0, r2
 80019a6:	d00b      	beq.n	80019c0 <TIM_Base_SetConfig+0x78>
 80019a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ac:	4290      	cmp	r0, r2
 80019ae:	d007      	beq.n	80019c0 <TIM_Base_SetConfig+0x78>
 80019b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019b4:	4290      	cmp	r0, r2
 80019b6:	d003      	beq.n	80019c0 <TIM_Base_SetConfig+0x78>
 80019b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019bc:	4290      	cmp	r0, r2
 80019be:	d103      	bne.n	80019c8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019c0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80019c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019c6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019c8:	694a      	ldr	r2, [r1, #20]
 80019ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019ce:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80019d0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019d2:	688b      	ldr	r3, [r1, #8]
 80019d4:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80019d6:	680b      	ldr	r3, [r1, #0]
 80019d8:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <TIM_Base_SetConfig+0xcc>)
 80019dc:	4298      	cmp	r0, r3
 80019de:	d013      	beq.n	8001a08 <TIM_Base_SetConfig+0xc0>
 80019e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e4:	4298      	cmp	r0, r3
 80019e6:	d00f      	beq.n	8001a08 <TIM_Base_SetConfig+0xc0>
 80019e8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80019ec:	4298      	cmp	r0, r3
 80019ee:	d00b      	beq.n	8001a08 <TIM_Base_SetConfig+0xc0>
 80019f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019f4:	4298      	cmp	r0, r3
 80019f6:	d007      	beq.n	8001a08 <TIM_Base_SetConfig+0xc0>
 80019f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019fc:	4298      	cmp	r0, r3
 80019fe:	d003      	beq.n	8001a08 <TIM_Base_SetConfig+0xc0>
 8001a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a04:	4298      	cmp	r0, r3
 8001a06:	d101      	bne.n	8001a0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a08:	690b      	ldr	r3, [r1, #16]
 8001a0a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	6143      	str	r3, [r0, #20]
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40012c00 	.word	0x40012c00
 8001a18:	40014000 	.word	0x40014000

08001a1c <HAL_TIM_Base_Init>:
{ 
 8001a1c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001a1e:	4604      	mov	r4, r0
 8001a20:	b1a0      	cbz	r0, 8001a4c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a22:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a2a:	b91b      	cbnz	r3, 8001a34 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001a2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001a30:	f001 fa58 	bl	8002ee4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001a34:	2302      	movs	r3, #2
 8001a36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001a3a:	6820      	ldr	r0, [r4, #0]
 8001a3c:	1d21      	adds	r1, r4, #4
 8001a3e:	f7ff ff83 	bl	8001948 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001a42:	2301      	movs	r3, #1
 8001a44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a48:	2000      	movs	r0, #0
 8001a4a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a4c:	2001      	movs	r0, #1
}
 8001a4e:	bd10      	pop	{r4, pc}

08001a50 <HAL_TIM_PWM_Init>:
{
 8001a50:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001a52:	4604      	mov	r4, r0
 8001a54:	b1a0      	cbz	r0, 8001a80 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a5e:	b91b      	cbnz	r3, 8001a68 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001a60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001a64:	f7ff febb 	bl	80017de <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001a6e:	6820      	ldr	r0, [r4, #0]
 8001a70:	1d21      	adds	r1, r4, #4
 8001a72:	f7ff ff69 	bl	8001948 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a80:	2001      	movs	r0, #1
}
 8001a82:	bd10      	pop	{r4, pc}

08001a84 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a84:	6a03      	ldr	r3, [r0, #32]
 8001a86:	f023 0301 	bic.w	r3, r3, #1
 8001a8a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a8c:	6a03      	ldr	r3, [r0, #32]
{
 8001a8e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001a90:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a92:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a9a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001a9e:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001aa0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001aa2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001aa6:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001aa8:	4d1f      	ldr	r5, [pc, #124]	; (8001b28 <TIM_OC1_SetConfig+0xa4>)
 8001aaa:	42a8      	cmp	r0, r5
 8001aac:	d013      	beq.n	8001ad6 <TIM_OC1_SetConfig+0x52>
 8001aae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001ab2:	42a8      	cmp	r0, r5
 8001ab4:	d00f      	beq.n	8001ad6 <TIM_OC1_SetConfig+0x52>
 8001ab6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001aba:	42a8      	cmp	r0, r5
 8001abc:	d00b      	beq.n	8001ad6 <TIM_OC1_SetConfig+0x52>
 8001abe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ac2:	42a8      	cmp	r0, r5
 8001ac4:	d007      	beq.n	8001ad6 <TIM_OC1_SetConfig+0x52>
 8001ac6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001aca:	42a8      	cmp	r0, r5
 8001acc:	d003      	beq.n	8001ad6 <TIM_OC1_SetConfig+0x52>
 8001ace:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001ad2:	42a8      	cmp	r0, r5
 8001ad4:	d122      	bne.n	8001b1c <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ad6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ad8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001adc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ade:	4d12      	ldr	r5, [pc, #72]	; (8001b28 <TIM_OC1_SetConfig+0xa4>)
 8001ae0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ae2:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ae6:	d013      	beq.n	8001b10 <TIM_OC1_SetConfig+0x8c>
 8001ae8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001aec:	42a8      	cmp	r0, r5
 8001aee:	d00f      	beq.n	8001b10 <TIM_OC1_SetConfig+0x8c>
 8001af0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001af4:	42a8      	cmp	r0, r5
 8001af6:	d00b      	beq.n	8001b10 <TIM_OC1_SetConfig+0x8c>
 8001af8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	d007      	beq.n	8001b10 <TIM_OC1_SetConfig+0x8c>
 8001b00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b04:	42a8      	cmp	r0, r5
 8001b06:	d003      	beq.n	8001b10 <TIM_OC1_SetConfig+0x8c>
 8001b08:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b0c:	42a8      	cmp	r0, r5
 8001b0e:	d105      	bne.n	8001b1c <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001b10:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b14:	698e      	ldr	r6, [r1, #24]
 8001b16:	694c      	ldr	r4, [r1, #20]
 8001b18:	4334      	orrs	r4, r6
 8001b1a:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b1c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b1e:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b20:	684a      	ldr	r2, [r1, #4]
 8001b22:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001b24:	6203      	str	r3, [r0, #32]
 8001b26:	bd70      	pop	{r4, r5, r6, pc}
 8001b28:	40012c00 	.word	0x40012c00

08001b2c <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b2c:	6a03      	ldr	r3, [r0, #32]
 8001b2e:	f023 0310 	bic.w	r3, r3, #16
 8001b32:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b34:	6a03      	ldr	r3, [r0, #32]
{
 8001b36:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001b38:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b3a:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b3c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b3e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001b42:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b46:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b4a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001b4c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b50:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b54:	4d1a      	ldr	r5, [pc, #104]	; (8001bc0 <TIM_OC2_SetConfig+0x94>)
 8001b56:	42a8      	cmp	r0, r5
 8001b58:	d007      	beq.n	8001b6a <TIM_OC2_SetConfig+0x3e>
 8001b5a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b5e:	42a8      	cmp	r0, r5
 8001b60:	d003      	beq.n	8001b6a <TIM_OC2_SetConfig+0x3e>
 8001b62:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001b66:	42a8      	cmp	r0, r5
 8001b68:	d10d      	bne.n	8001b86 <TIM_OC2_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b6a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b70:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b74:	4d12      	ldr	r5, [pc, #72]	; (8001bc0 <TIM_OC2_SetConfig+0x94>)
 8001b76:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b7c:	d012      	beq.n	8001ba4 <TIM_OC2_SetConfig+0x78>
 8001b7e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b82:	42a8      	cmp	r0, r5
 8001b84:	d00e      	beq.n	8001ba4 <TIM_OC2_SetConfig+0x78>
 8001b86:	4d0f      	ldr	r5, [pc, #60]	; (8001bc4 <TIM_OC2_SetConfig+0x98>)
 8001b88:	42a8      	cmp	r0, r5
 8001b8a:	d00b      	beq.n	8001ba4 <TIM_OC2_SetConfig+0x78>
 8001b8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b90:	42a8      	cmp	r0, r5
 8001b92:	d007      	beq.n	8001ba4 <TIM_OC2_SetConfig+0x78>
 8001b94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b98:	42a8      	cmp	r0, r5
 8001b9a:	d003      	beq.n	8001ba4 <TIM_OC2_SetConfig+0x78>
 8001b9c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001ba0:	42a8      	cmp	r0, r5
 8001ba2:	d106      	bne.n	8001bb2 <TIM_OC2_SetConfig+0x86>
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ba4:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ba8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001baa:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001bac:	4334      	orrs	r4, r6
 8001bae:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bb2:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001bb4:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001bb6:	684a      	ldr	r2, [r1, #4]
 8001bb8:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001bba:	6203      	str	r3, [r0, #32]
 8001bbc:	bd70      	pop	{r4, r5, r6, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40012c00 	.word	0x40012c00
 8001bc4:	40014000 	.word	0x40014000

08001bc8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bc8:	6a03      	ldr	r3, [r0, #32]
 8001bca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bce:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bd0:	6a03      	ldr	r3, [r0, #32]
{
 8001bd2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001bd4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001bd6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bd8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001bda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bde:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001be2:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001be4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001be6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001bee:	4d1a      	ldr	r5, [pc, #104]	; (8001c58 <TIM_OC3_SetConfig+0x90>)
 8001bf0:	42a8      	cmp	r0, r5
 8001bf2:	d007      	beq.n	8001c04 <TIM_OC3_SetConfig+0x3c>
 8001bf4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001bf8:	42a8      	cmp	r0, r5
 8001bfa:	d003      	beq.n	8001c04 <TIM_OC3_SetConfig+0x3c>
 8001bfc:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	d10d      	bne.n	8001c20 <TIM_OC3_SetConfig+0x58>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c04:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c0a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001c0e:	4d12      	ldr	r5, [pc, #72]	; (8001c58 <TIM_OC3_SetConfig+0x90>)
 8001c10:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001c16:	d012      	beq.n	8001c3e <TIM_OC3_SetConfig+0x76>
 8001c18:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c1c:	42a8      	cmp	r0, r5
 8001c1e:	d00e      	beq.n	8001c3e <TIM_OC3_SetConfig+0x76>
 8001c20:	4d0e      	ldr	r5, [pc, #56]	; (8001c5c <TIM_OC3_SetConfig+0x94>)
 8001c22:	42a8      	cmp	r0, r5
 8001c24:	d00b      	beq.n	8001c3e <TIM_OC3_SetConfig+0x76>
 8001c26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c2a:	42a8      	cmp	r0, r5
 8001c2c:	d007      	beq.n	8001c3e <TIM_OC3_SetConfig+0x76>
 8001c2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c32:	42a8      	cmp	r0, r5
 8001c34:	d003      	beq.n	8001c3e <TIM_OC3_SetConfig+0x76>
 8001c36:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c3a:	42a8      	cmp	r0, r5
 8001c3c:	d106      	bne.n	8001c4c <TIM_OC3_SetConfig+0x84>

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c3e:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c42:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c44:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c46:	4334      	orrs	r4, r6
 8001c48:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c4c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c4e:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c50:	684a      	ldr	r2, [r1, #4]
 8001c52:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001c54:	6203      	str	r3, [r0, #32]
 8001c56:	bd70      	pop	{r4, r5, r6, pc}
 8001c58:	40012c00 	.word	0x40012c00
 8001c5c:	40014000 	.word	0x40014000

08001c60 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c60:	6a03      	ldr	r3, [r0, #32]
 8001c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c66:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c68:	6a03      	ldr	r3, [r0, #32]
{
 8001c6a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001c6c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c6e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c72:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001c76:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c7a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c7e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001c80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c84:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001c88:	4d10      	ldr	r5, [pc, #64]	; (8001ccc <TIM_OC4_SetConfig+0x6c>)
 8001c8a:	42a8      	cmp	r0, r5
 8001c8c:	d013      	beq.n	8001cb6 <TIM_OC4_SetConfig+0x56>
 8001c8e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c92:	42a8      	cmp	r0, r5
 8001c94:	d00f      	beq.n	8001cb6 <TIM_OC4_SetConfig+0x56>
 8001c96:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001c9a:	42a8      	cmp	r0, r5
 8001c9c:	d00b      	beq.n	8001cb6 <TIM_OC4_SetConfig+0x56>
 8001c9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ca2:	42a8      	cmp	r0, r5
 8001ca4:	d007      	beq.n	8001cb6 <TIM_OC4_SetConfig+0x56>
 8001ca6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001caa:	42a8      	cmp	r0, r5
 8001cac:	d003      	beq.n	8001cb6 <TIM_OC4_SetConfig+0x56>
 8001cae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001cb2:	42a8      	cmp	r0, r5
 8001cb4:	d104      	bne.n	8001cc0 <TIM_OC4_SetConfig+0x60>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001cb6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001cb8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001cbc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cc0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cc2:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001cc4:	684a      	ldr	r2, [r1, #4]
 8001cc6:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001cc8:	6203      	str	r3, [r0, #32]
 8001cca:	bd30      	pop	{r4, r5, pc}
 8001ccc:	40012c00 	.word	0x40012c00

08001cd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001cd0:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001cd2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cd4:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cd6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cda:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001cde:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ce0:	6083      	str	r3, [r0, #8]
 8001ce2:	bd10      	pop	{r4, pc}

08001ce4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001ce4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ce8:	2b01      	cmp	r3, #1
{
 8001cea:	b570      	push	{r4, r5, r6, lr}
 8001cec:	4604      	mov	r4, r0
 8001cee:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001cf2:	d01a      	beq.n	8001d2a <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001cf8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001d00:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d02:	4b52      	ldr	r3, [pc, #328]	; (8001e4c <HAL_TIM_ConfigClockSource+0x168>)
 8001d04:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001d06:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d08:	680b      	ldr	r3, [r1, #0]
 8001d0a:	2b40      	cmp	r3, #64	; 0x40
 8001d0c:	d075      	beq.n	8001dfa <HAL_TIM_ConfigClockSource+0x116>
 8001d0e:	d818      	bhi.n	8001d42 <HAL_TIM_ConfigClockSource+0x5e>
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	f000 808f 	beq.w	8001e34 <HAL_TIM_ConfigClockSource+0x150>
 8001d16:	d809      	bhi.n	8001d2c <HAL_TIM_ConfigClockSource+0x48>
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 8085 	beq.w	8001e28 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8001d1e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d20:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d26:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001d2a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	f000 8087 	beq.w	8001e40 <HAL_TIM_ConfigClockSource+0x15c>
 8001d32:	2b30      	cmp	r3, #48	; 0x30
 8001d34:	d1f3      	bne.n	8001d1e <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8001d36:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d3c:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001d40:	e033      	b.n	8001daa <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001d42:	2b70      	cmp	r3, #112	; 0x70
 8001d44:	d033      	beq.n	8001dae <HAL_TIM_ConfigClockSource+0xca>
 8001d46:	d81b      	bhi.n	8001d80 <HAL_TIM_ConfigClockSource+0x9c>
 8001d48:	2b50      	cmp	r3, #80	; 0x50
 8001d4a:	d03f      	beq.n	8001dcc <HAL_TIM_ConfigClockSource+0xe8>
 8001d4c:	2b60      	cmp	r3, #96	; 0x60
 8001d4e:	d1e6      	bne.n	8001d1e <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001d50:	684d      	ldr	r5, [r1, #4]
 8001d52:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d54:	6a01      	ldr	r1, [r0, #32]
 8001d56:	f021 0110 	bic.w	r1, r1, #16
 8001d5a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d5c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001d5e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d60:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d68:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d6c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001d70:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d72:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001d74:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d7a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001d7e:	e014      	b.n	8001daa <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d84:	d00c      	beq.n	8001da0 <HAL_TIM_ConfigClockSource+0xbc>
 8001d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d8a:	d1c8      	bne.n	8001d1e <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001d8c:	68cb      	ldr	r3, [r1, #12]
 8001d8e:	684a      	ldr	r2, [r1, #4]
 8001d90:	6889      	ldr	r1, [r1, #8]
 8001d92:	f7ff ff9d 	bl	8001cd0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d96:	6822      	ldr	r2, [r4, #0]
 8001d98:	6893      	ldr	r3, [r2, #8]
 8001d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9e:	e013      	b.n	8001dc8 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001da0:	6883      	ldr	r3, [r0, #8]
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da6:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001daa:	6083      	str	r3, [r0, #8]
 8001dac:	e7b7      	b.n	8001d1e <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001dae:	68cb      	ldr	r3, [r1, #12]
 8001db0:	684a      	ldr	r2, [r1, #4]
 8001db2:	6889      	ldr	r1, [r1, #8]
 8001db4:	f7ff ff8c 	bl	8001cd0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001db8:	6822      	ldr	r2, [r4, #0]
 8001dba:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dc8:	6093      	str	r3, [r2, #8]
    break;
 8001dca:	e7a8      	b.n	8001d1e <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001dcc:	684a      	ldr	r2, [r1, #4]
 8001dce:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001dd0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dd2:	6a05      	ldr	r5, [r0, #32]
 8001dd4:	f025 0501 	bic.w	r5, r5, #1
 8001dd8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001dda:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ddc:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001de0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001de4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001de8:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001dea:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001dec:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001dee:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001df4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001df8:	e7d7      	b.n	8001daa <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001dfa:	684a      	ldr	r2, [r1, #4]
 8001dfc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001dfe:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e00:	6a05      	ldr	r5, [r0, #32]
 8001e02:	f025 0501 	bic.w	r5, r5, #1
 8001e06:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001e08:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e0a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e12:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001e16:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001e18:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e1a:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001e1c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e22:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001e26:	e7c0      	b.n	8001daa <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001e28:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e2e:	f043 0307 	orr.w	r3, r3, #7
 8001e32:	e7ba      	b.n	8001daa <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001e34:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e3a:	f043 0317 	orr.w	r3, r3, #23
 8001e3e:	e7b4      	b.n	8001daa <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001e40:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e46:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001e4a:	e7ae      	b.n	8001daa <HAL_TIM_ConfigClockSource+0xc6>
 8001e4c:	fffe0088 	.word	0xfffe0088

08001e50 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001e50:	6a03      	ldr	r3, [r0, #32]
{
 8001e52:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001e54:	2401      	movs	r4, #1
 8001e56:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001e58:	ea23 0304 	bic.w	r3, r3, r4
 8001e5c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001e5e:	6a03      	ldr	r3, [r0, #32]
 8001e60:	408a      	lsls	r2, r1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	6202      	str	r2, [r0, #32]
 8001e66:	bd10      	pop	{r4, pc}

08001e68 <HAL_TIM_PWM_Start>:
{
 8001e68:	b510      	push	{r4, lr}
 8001e6a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	6800      	ldr	r0, [r0, #0]
 8001e70:	f7ff ffee 	bl	8001e50 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	4a10      	ldr	r2, [pc, #64]	; (8001eb8 <HAL_TIM_PWM_Start+0x50>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d013      	beq.n	8001ea4 <HAL_TIM_PWM_Start+0x3c>
 8001e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00f      	beq.n	8001ea4 <HAL_TIM_PWM_Start+0x3c>
 8001e84:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00b      	beq.n	8001ea4 <HAL_TIM_PWM_Start+0x3c>
 8001e8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d007      	beq.n	8001ea4 <HAL_TIM_PWM_Start+0x3c>
 8001e94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d003      	beq.n	8001ea4 <HAL_TIM_PWM_Start+0x3c>
 8001e9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d103      	bne.n	8001eac <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8001ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eaa:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
} 
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	bd10      	pop	{r4, pc}
 8001eb8:	40012c00 	.word	0x40012c00

08001ebc <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001ebc:	6a03      	ldr	r3, [r0, #32]
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ec4:	6a03      	ldr	r3, [r0, #32]
{
 8001ec6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001ec8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001eca:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ecc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001ece:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ed2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8001ed6:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001ed8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8001eda:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001ede:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ee2:	4d11      	ldr	r5, [pc, #68]	; (8001f28 <TIM_OC5_SetConfig+0x6c>)
 8001ee4:	42a8      	cmp	r0, r5
 8001ee6:	d013      	beq.n	8001f10 <TIM_OC5_SetConfig+0x54>
 8001ee8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001eec:	42a8      	cmp	r0, r5
 8001eee:	d00f      	beq.n	8001f10 <TIM_OC5_SetConfig+0x54>
 8001ef0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001ef4:	42a8      	cmp	r0, r5
 8001ef6:	d00b      	beq.n	8001f10 <TIM_OC5_SetConfig+0x54>
 8001ef8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001efc:	42a8      	cmp	r0, r5
 8001efe:	d007      	beq.n	8001f10 <TIM_OC5_SetConfig+0x54>
 8001f00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f04:	42a8      	cmp	r0, r5
 8001f06:	d003      	beq.n	8001f10 <TIM_OC5_SetConfig+0x54>
 8001f08:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001f0c:	42a8      	cmp	r0, r5
 8001f0e:	d104      	bne.n	8001f1a <TIM_OC5_SetConfig+0x5e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001f10:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001f12:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001f16:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f1a:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001f1c:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001f1e:	684a      	ldr	r2, [r1, #4]
 8001f20:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001f22:	6203      	str	r3, [r0, #32]
 8001f24:	bd30      	pop	{r4, r5, pc}
 8001f26:	bf00      	nop
 8001f28:	40012c00 	.word	0x40012c00

08001f2c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001f2c:	6a03      	ldr	r3, [r0, #32]
 8001f2e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f32:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f34:	6a03      	ldr	r3, [r0, #32]
{
 8001f36:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001f38:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001f3a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f3c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001f3e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001f42:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f46:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001f4a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001f4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001f50:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f54:	4d10      	ldr	r5, [pc, #64]	; (8001f98 <TIM_OC6_SetConfig+0x6c>)
 8001f56:	42a8      	cmp	r0, r5
 8001f58:	d013      	beq.n	8001f82 <TIM_OC6_SetConfig+0x56>
 8001f5a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001f5e:	42a8      	cmp	r0, r5
 8001f60:	d00f      	beq.n	8001f82 <TIM_OC6_SetConfig+0x56>
 8001f62:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001f66:	42a8      	cmp	r0, r5
 8001f68:	d00b      	beq.n	8001f82 <TIM_OC6_SetConfig+0x56>
 8001f6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f6e:	42a8      	cmp	r0, r5
 8001f70:	d007      	beq.n	8001f82 <TIM_OC6_SetConfig+0x56>
 8001f72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f76:	42a8      	cmp	r0, r5
 8001f78:	d003      	beq.n	8001f82 <TIM_OC6_SetConfig+0x56>
 8001f7a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001f7e:	42a8      	cmp	r0, r5
 8001f80:	d104      	bne.n	8001f8c <TIM_OC6_SetConfig+0x60>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001f82:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001f84:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001f88:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f8c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001f8e:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001f90:	684a      	ldr	r2, [r1, #4]
 8001f92:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001f94:	6203      	str	r3, [r0, #32]
 8001f96:	bd30      	pop	{r4, r5, pc}
 8001f98:	40012c00 	.word	0x40012c00

08001f9c <HAL_TIM_PWM_ConfigChannel>:
{
 8001f9c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001f9e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001fa2:	2b01      	cmp	r3, #1
{
 8001fa4:	4604      	mov	r4, r0
 8001fa6:	460d      	mov	r5, r1
 8001fa8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001fac:	d010      	beq.n	8001fd0 <HAL_TIM_PWM_ConfigChannel+0x34>
 8001fae:	2301      	movs	r3, #1
  switch (Channel)
 8001fb0:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8001fb2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001fba:	d043      	beq.n	8002044 <HAL_TIM_PWM_ConfigChannel+0xa8>
 8001fbc:	d809      	bhi.n	8001fd2 <HAL_TIM_PWM_ConfigChannel+0x36>
 8001fbe:	b1fa      	cbz	r2, 8002000 <HAL_TIM_PWM_ConfigChannel+0x64>
 8001fc0:	2a04      	cmp	r2, #4
 8001fc2:	d02e      	beq.n	8002022 <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 8001fc4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001fc6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001fc8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001fcc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001fd0:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8001fd2:	2a10      	cmp	r2, #16
 8001fd4:	d047      	beq.n	8002066 <HAL_TIM_PWM_ConfigChannel+0xca>
 8001fd6:	2a14      	cmp	r2, #20
 8001fd8:	d056      	beq.n	8002088 <HAL_TIM_PWM_ConfigChannel+0xec>
 8001fda:	2a0c      	cmp	r2, #12
 8001fdc:	d1f2      	bne.n	8001fc4 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fde:	6820      	ldr	r0, [r4, #0]
 8001fe0:	f7ff fe3e 	bl	8001c60 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fe4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001fe6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ff0:	69da      	ldr	r2, [r3, #28]
 8001ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001ff8:	69da      	ldr	r2, [r3, #28]
 8001ffa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ffe:	e030      	b.n	8002062 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002000:	6820      	ldr	r0, [r4, #0]
 8002002:	f7ff fd3f 	bl	8001a84 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002006:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002008:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800200a:	699a      	ldr	r2, [r3, #24]
 800200c:	f042 0208 	orr.w	r2, r2, #8
 8002010:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	f022 0204 	bic.w	r2, r2, #4
 8002018:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800201a:	699a      	ldr	r2, [r3, #24]
 800201c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800201e:	619a      	str	r2, [r3, #24]
    break;
 8002020:	e7d0      	b.n	8001fc4 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002022:	6820      	ldr	r0, [r4, #0]
 8002024:	f7ff fd82 	bl	8001b2c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002028:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800202a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800202c:	699a      	ldr	r2, [r3, #24]
 800202e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002034:	699a      	ldr	r2, [r3, #24]
 8002036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800203a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002042:	e7ec      	b.n	800201e <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002044:	6820      	ldr	r0, [r4, #0]
 8002046:	f7ff fdbf 	bl	8001bc8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800204a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800204c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800204e:	69da      	ldr	r2, [r3, #28]
 8002050:	f042 0208 	orr.w	r2, r2, #8
 8002054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002056:	69da      	ldr	r2, [r3, #28]
 8002058:	f022 0204 	bic.w	r2, r2, #4
 800205c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800205e:	69da      	ldr	r2, [r3, #28]
 8002060:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002062:	61da      	str	r2, [r3, #28]
    break;
 8002064:	e7ae      	b.n	8001fc4 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002066:	6820      	ldr	r0, [r4, #0]
 8002068:	f7ff ff28 	bl	8001ebc <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800206c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800206e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002072:	f042 0208 	orr.w	r2, r2, #8
 8002076:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800207a:	f022 0204 	bic.w	r2, r2, #4
 800207e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002082:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002084:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8002086:	e79d      	b.n	8001fc4 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002088:	6820      	ldr	r0, [r4, #0]
 800208a:	f7ff ff4f 	bl	8001f2c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800208e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002090:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002092:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002098:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800209a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800209c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 80020a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020a8:	e7ec      	b.n	8002084 <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

080020ac <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80020ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020b0:	2b01      	cmp	r3, #1
{
 80020b2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80020b4:	d020      	beq.n	80020f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  tmpcr2 = htim->Instance->CR2;
 80020b6:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80020b8:	4d10      	ldr	r5, [pc, #64]	; (80020fc <HAL_TIMEx_MasterConfigSynchronization+0x50>)
  tmpcr2 = htim->Instance->CR2;
 80020ba:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80020bc:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80020be:	42aa      	cmp	r2, r5
 80020c0:	d007      	beq.n	80020d2 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80020c2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80020c6:	42aa      	cmp	r2, r5
 80020c8:	d003      	beq.n	80020d2 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80020ca:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80020ce:	42aa      	cmp	r2, r5
 80020d0:	d103      	bne.n	80020da <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80020d2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80020d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80020d8:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020da:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020dc:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80020de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020e2:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80020e4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 80020e8:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020ea:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 80020ec:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80020ee:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80020f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80020f4:	4618      	mov	r0, r3
 80020f6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80020f8:	2002      	movs	r0, #2
} 
 80020fa:	bd30      	pop	{r4, r5, pc}
 80020fc:	40012c00 	.word	0x40012c00

08002100 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8002100:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002104:	2b01      	cmp	r3, #1
{
 8002106:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002108:	d03c      	beq.n	8002184 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800210a:	68cb      	ldr	r3, [r1, #12]
 800210c:	688a      	ldr	r2, [r1, #8]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800210e:	4c1e      	ldr	r4, [pc, #120]	; (8002188 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002114:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002116:	684a      	ldr	r2, [r1, #4]
 8002118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800211c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800211e:	680a      	ldr	r2, [r1, #0]
 8002120:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002124:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002126:	690a      	ldr	r2, [r1, #16]
 8002128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800212c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800212e:	694a      	ldr	r2, [r1, #20]
 8002130:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002134:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002136:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002138:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800213c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800213e:	698a      	ldr	r2, [r1, #24]
 8002140:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002144:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002148:	6802      	ldr	r2, [r0, #0]
 800214a:	42a2      	cmp	r2, r4
 800214c:	d007      	beq.n	800215e <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 800214e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8002152:	42a2      	cmp	r2, r4
 8002154:	d003      	beq.n	800215e <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8002156:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800215a:	42a2      	cmp	r2, r4
 800215c:	d10c      	bne.n	8002178 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 800215e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002160:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002164:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002168:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800216a:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800216c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002170:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002172:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002176:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800217a:	2300      	movs	r3, #0
 800217c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002180:	4618      	mov	r0, r3
 8002182:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002184:	2002      	movs	r0, #2
}
 8002186:	bd10      	pop	{r4, pc}
 8002188:	40012c00 	.word	0x40012c00

0800218c <HAL_TIMEx_CommutationCallback>:
 800218c:	4770      	bx	lr

0800218e <HAL_TIMEx_BreakCallback>:
 800218e:	4770      	bx	lr

08002190 <HAL_TIMEx_Break2Callback>:
{
 8002190:	4770      	bx	lr

08002192 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002192:	6803      	ldr	r3, [r0, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800219a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021a4:	2320      	movs	r3, #32
 80021a6:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80021aa:	4770      	bx	lr

080021ac <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 80021ac:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80021b0:	2b20      	cmp	r3, #32
 80021b2:	d11a      	bne.n	80021ea <HAL_UART_Transmit_IT+0x3e>
    if((pData == NULL ) || (Size == 0U))
 80021b4:	b1b9      	cbz	r1, 80021e6 <HAL_UART_Transmit_IT+0x3a>
 80021b6:	b1b2      	cbz	r2, 80021e6 <HAL_UART_Transmit_IT+0x3a>
    __HAL_LOCK(huart);
 80021b8:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d014      	beq.n	80021ea <HAL_UART_Transmit_IT+0x3e>
    huart->TxXferCount = Size;
 80021c0:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->pTxBuffPtr = pData;
 80021c4:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 80021c6:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ca:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80021cc:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ce:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021d0:	2221      	movs	r2, #33	; 0x21
 80021d2:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80021d6:	680a      	ldr	r2, [r1, #0]
    __HAL_UNLOCK(huart);
 80021d8:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80021dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021e0:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80021e2:	4618      	mov	r0, r3
 80021e4:	4770      	bx	lr
      return HAL_ERROR;
 80021e6:	2001      	movs	r0, #1
 80021e8:	4770      	bx	lr
    return HAL_BUSY;
 80021ea:	2002      	movs	r0, #2
}
 80021ec:	4770      	bx	lr

080021ee <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80021ee:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	d13d      	bne.n	8002272 <HAL_UART_Receive_IT+0x84>
    if((pData == NULL ) || (Size == 0U))
 80021f6:	2900      	cmp	r1, #0
 80021f8:	d039      	beq.n	800226e <HAL_UART_Receive_IT+0x80>
 80021fa:	2a00      	cmp	r2, #0
 80021fc:	d037      	beq.n	800226e <HAL_UART_Receive_IT+0x80>
    __HAL_LOCK(huart);
 80021fe:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002202:	2b01      	cmp	r3, #1
 8002204:	d035      	beq.n	8002272 <HAL_UART_Receive_IT+0x84>
 8002206:	2301      	movs	r3, #1
 8002208:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 800220c:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 800220e:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8002210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8002214:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8002218:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800221c:	d119      	bne.n	8002252 <HAL_UART_Receive_IT+0x64>
 800221e:	6903      	ldr	r3, [r0, #16]
 8002220:	b9ab      	cbnz	r3, 800224e <HAL_UART_Receive_IT+0x60>
 8002222:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002226:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800222a:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800222c:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800222e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002230:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002234:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 8002236:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800223a:	6891      	ldr	r1, [r2, #8]
 800223c:	f041 0101 	orr.w	r1, r1, #1
 8002240:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002242:	6811      	ldr	r1, [r2, #0]
 8002244:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8002248:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 800224a:	4618      	mov	r0, r3
 800224c:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800224e:	23ff      	movs	r3, #255	; 0xff
 8002250:	e7e9      	b.n	8002226 <HAL_UART_Receive_IT+0x38>
 8002252:	b923      	cbnz	r3, 800225e <HAL_UART_Receive_IT+0x70>
 8002254:	6903      	ldr	r3, [r0, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f9      	beq.n	800224e <HAL_UART_Receive_IT+0x60>
 800225a:	237f      	movs	r3, #127	; 0x7f
 800225c:	e7e3      	b.n	8002226 <HAL_UART_Receive_IT+0x38>
 800225e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002262:	d1e2      	bne.n	800222a <HAL_UART_Receive_IT+0x3c>
 8002264:	6903      	ldr	r3, [r0, #16]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f7      	beq.n	800225a <HAL_UART_Receive_IT+0x6c>
 800226a:	233f      	movs	r3, #63	; 0x3f
 800226c:	e7db      	b.n	8002226 <HAL_UART_Receive_IT+0x38>
      return HAL_ERROR;
 800226e:	2001      	movs	r0, #1
 8002270:	4770      	bx	lr
    return HAL_BUSY;
 8002272:	2002      	movs	r0, #2
}
 8002274:	4770      	bx	lr

08002276 <HAL_UART_TxCpltCallback>:
 8002276:	4770      	bx	lr

08002278 <HAL_UART_ErrorCallback>:
 8002278:	4770      	bx	lr

0800227a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800227a:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800227c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002284:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002288:	f7ff fff6 	bl	8002278 <HAL_UART_ErrorCallback>
 800228c:	bd08      	pop	{r3, pc}
	...

08002290 <UART_SetConfig>:
{
 8002290:	b538      	push	{r3, r4, r5, lr}
 8002292:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002294:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002296:	6921      	ldr	r1, [r4, #16]
 8002298:	68a2      	ldr	r2, [r4, #8]
 800229a:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800229c:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800229e:	430a      	orrs	r2, r1
 80022a0:	6961      	ldr	r1, [r4, #20]
 80022a2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80022a4:	4977      	ldr	r1, [pc, #476]	; (8002484 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022a6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80022a8:	4001      	ands	r1, r0
 80022aa:	430a      	orrs	r2, r1
 80022ac:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022ae:	686a      	ldr	r2, [r5, #4]
 80022b0:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80022b2:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022b4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80022b8:	430a      	orrs	r2, r1
 80022ba:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80022bc:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80022be:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80022c0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80022c4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80022c6:	430a      	orrs	r2, r1
 80022c8:	60aa      	str	r2, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022ca:	4a6f      	ldr	r2, [pc, #444]	; (8002488 <UART_SetConfig+0x1f8>)
 80022cc:	4295      	cmp	r5, r2
 80022ce:	d112      	bne.n	80022f6 <UART_SetConfig+0x66>
 80022d0:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80022d4:	496d      	ldr	r1, [pc, #436]	; (800248c <UART_SetConfig+0x1fc>)
 80022d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022d8:	f002 0203 	and.w	r2, r2, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e0:	5c8a      	ldrb	r2, [r1, r2]
 80022e2:	d066      	beq.n	80023b2 <UART_SetConfig+0x122>
    switch (clocksource)
 80022e4:	2a08      	cmp	r2, #8
 80022e6:	d819      	bhi.n	800231c <UART_SetConfig+0x8c>
 80022e8:	e8df f002 	tbb	[pc, r2]
 80022ec:	189e92c2 	.word	0x189e92c2
 80022f0:	181818a9 	.word	0x181818a9
 80022f4:	ac          	.byte	0xac
 80022f5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022f6:	4a66      	ldr	r2, [pc, #408]	; (8002490 <UART_SetConfig+0x200>)
 80022f8:	4295      	cmp	r5, r2
 80022fa:	d124      	bne.n	8002346 <UART_SetConfig+0xb6>
 80022fc:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8002300:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002302:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002306:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800230a:	f000 80a0 	beq.w	800244e <UART_SetConfig+0x1be>
 800230e:	d807      	bhi.n	8002320 <UART_SetConfig+0x90>
 8002310:	2a00      	cmp	r2, #0
 8002312:	f000 80aa 	beq.w	800246a <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800231a:	d076      	beq.n	800240a <UART_SetConfig+0x17a>
        ret = HAL_ERROR;
 800231c:	2001      	movs	r0, #1
  return ret;
 800231e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002320:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002324:	f000 8099 	beq.w	800245a <UART_SetConfig+0x1ca>
 8002328:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800232c:	d1f3      	bne.n	8002316 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800232e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002332:	d179      	bne.n	8002428 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002334:	6860      	ldr	r0, [r4, #4]
 8002336:	0843      	lsrs	r3, r0, #1
 8002338:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800233c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002340:	fbb3 f3f0 	udiv	r3, r3, r0
 8002344:	e054      	b.n	80023f0 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002346:	4a53      	ldr	r2, [pc, #332]	; (8002494 <UART_SetConfig+0x204>)
 8002348:	4295      	cmp	r5, r2
 800234a:	d10e      	bne.n	800236a <UART_SetConfig+0xda>
 800234c:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8002350:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002352:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8002356:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800235a:	d078      	beq.n	800244e <UART_SetConfig+0x1be>
 800235c:	d9d8      	bls.n	8002310 <UART_SetConfig+0x80>
 800235e:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8002362:	d07a      	beq.n	800245a <UART_SetConfig+0x1ca>
 8002364:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002368:	e7e0      	b.n	800232c <UART_SetConfig+0x9c>
 800236a:	4a4b      	ldr	r2, [pc, #300]	; (8002498 <UART_SetConfig+0x208>)
 800236c:	4295      	cmp	r5, r2
 800236e:	d10e      	bne.n	800238e <UART_SetConfig+0xfe>
 8002370:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8002374:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002376:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800237a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800237e:	d066      	beq.n	800244e <UART_SetConfig+0x1be>
 8002380:	d9c6      	bls.n	8002310 <UART_SetConfig+0x80>
 8002382:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002386:	d068      	beq.n	800245a <UART_SetConfig+0x1ca>
 8002388:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800238c:	e7ce      	b.n	800232c <UART_SetConfig+0x9c>
 800238e:	4a43      	ldr	r2, [pc, #268]	; (800249c <UART_SetConfig+0x20c>)
 8002390:	4295      	cmp	r5, r2
 8002392:	d1c0      	bne.n	8002316 <UART_SetConfig+0x86>
 8002394:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002398:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800239a:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800239e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80023a2:	d054      	beq.n	800244e <UART_SetConfig+0x1be>
 80023a4:	d9b4      	bls.n	8002310 <UART_SetConfig+0x80>
 80023a6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80023aa:	d056      	beq.n	800245a <UART_SetConfig+0x1ca>
 80023ac:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 80023b0:	e7bc      	b.n	800232c <UART_SetConfig+0x9c>
    switch (clocksource)
 80023b2:	2a08      	cmp	r2, #8
 80023b4:	d829      	bhi.n	800240a <UART_SetConfig+0x17a>
 80023b6:	a301      	add	r3, pc, #4	; (adr r3, 80023bc <UART_SetConfig+0x12c>)
 80023b8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80023bc:	080023e1 	.word	0x080023e1
 80023c0:	08002405 	.word	0x08002405
 80023c4:	08002335 	.word	0x08002335
 80023c8:	0800240b 	.word	0x0800240b
 80023cc:	08002455 	.word	0x08002455
 80023d0:	0800240b 	.word	0x0800240b
 80023d4:	0800240b 	.word	0x0800240b
 80023d8:	0800240b 	.word	0x0800240b
 80023dc:	08002461 	.word	0x08002461
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80023e0:	f7ff f87e 	bl	80014e0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80023e4:	6861      	ldr	r1, [r4, #4]
 80023e6:	084a      	lsrs	r2, r1, #1
 80023e8:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80023ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80023f0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80023f2:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80023f4:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 80023f8:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023fa:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80023fe:	4313      	orrs	r3, r2
 8002400:	60cb      	str	r3, [r1, #12]
 8002402:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002404:	f7ff f884 	bl	8001510 <HAL_RCC_GetPCLK2Freq>
 8002408:	e7ec      	b.n	80023e4 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 800240a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800240c:	2300      	movs	r3, #0
 800240e:	e7f1      	b.n	80023f4 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002410:	f7ff f87e 	bl	8001510 <HAL_RCC_GetPCLK2Freq>
 8002414:	6863      	ldr	r3, [r4, #4]
 8002416:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800241a:	fbb0 f0f3 	udiv	r0, r0, r3
 800241e:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <UART_SetConfig+0x1f8>)
 8002420:	b280      	uxth	r0, r0
 8002422:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002424:	2000      	movs	r0, #0
        break;
 8002426:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002428:	6862      	ldr	r2, [r4, #4]
 800242a:	0853      	lsrs	r3, r2, #1
 800242c:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002430:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002434:	fbb3 f3f2 	udiv	r3, r3, r2
 8002438:	b29b      	uxth	r3, r3
 800243a:	60eb      	str	r3, [r5, #12]
 800243c:	e7f2      	b.n	8002424 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800243e:	f7fe ff79 	bl	8001334 <HAL_RCC_GetSysClockFreq>
 8002442:	e017      	b.n	8002474 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002444:	6862      	ldr	r2, [r4, #4]
 8002446:	0853      	lsrs	r3, r2, #1
 8002448:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800244c:	e7f2      	b.n	8002434 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800244e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002452:	d1f4      	bne.n	800243e <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002454:	f7fe ff6e 	bl	8001334 <HAL_RCC_GetSysClockFreq>
 8002458:	e7c4      	b.n	80023e4 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800245a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800245e:	d1f1      	bne.n	8002444 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002460:	6860      	ldr	r0, [r4, #4]
 8002462:	0843      	lsrs	r3, r0, #1
 8002464:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002468:	e76a      	b.n	8002340 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800246a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800246e:	d0b7      	beq.n	80023e0 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002470:	f7ff f836 	bl	80014e0 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002474:	6863      	ldr	r3, [r4, #4]
 8002476:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800247a:	fbb0 f0f3 	udiv	r0, r0, r3
 800247e:	b280      	uxth	r0, r0
 8002480:	60e8      	str	r0, [r5, #12]
 8002482:	e7cf      	b.n	8002424 <UART_SetConfig+0x194>
 8002484:	efff69f3 	.word	0xefff69f3
 8002488:	40013800 	.word	0x40013800
 800248c:	08003b80 	.word	0x08003b80
 8002490:	40004400 	.word	0x40004400
 8002494:	40004800 	.word	0x40004800
 8002498:	40004c00 	.word	0x40004c00
 800249c:	40005000 	.word	0x40005000

080024a0 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80024a2:	07da      	lsls	r2, r3, #31
{
 80024a4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024a6:	d506      	bpl.n	80024b6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024a8:	6801      	ldr	r1, [r0, #0]
 80024aa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80024ac:	684a      	ldr	r2, [r1, #4]
 80024ae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80024b2:	4322      	orrs	r2, r4
 80024b4:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024b6:	079c      	lsls	r4, r3, #30
 80024b8:	d506      	bpl.n	80024c8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024ba:	6801      	ldr	r1, [r0, #0]
 80024bc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80024be:	684a      	ldr	r2, [r1, #4]
 80024c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024c4:	4322      	orrs	r2, r4
 80024c6:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024c8:	0759      	lsls	r1, r3, #29
 80024ca:	d506      	bpl.n	80024da <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024cc:	6801      	ldr	r1, [r0, #0]
 80024ce:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80024d0:	684a      	ldr	r2, [r1, #4]
 80024d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024d6:	4322      	orrs	r2, r4
 80024d8:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024da:	071a      	lsls	r2, r3, #28
 80024dc:	d506      	bpl.n	80024ec <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024de:	6801      	ldr	r1, [r0, #0]
 80024e0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80024e2:	684a      	ldr	r2, [r1, #4]
 80024e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024e8:	4322      	orrs	r2, r4
 80024ea:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024ec:	06dc      	lsls	r4, r3, #27
 80024ee:	d506      	bpl.n	80024fe <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024f0:	6801      	ldr	r1, [r0, #0]
 80024f2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80024f4:	688a      	ldr	r2, [r1, #8]
 80024f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024fa:	4322      	orrs	r2, r4
 80024fc:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024fe:	0699      	lsls	r1, r3, #26
 8002500:	d506      	bpl.n	8002510 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002502:	6801      	ldr	r1, [r0, #0]
 8002504:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002506:	688a      	ldr	r2, [r1, #8]
 8002508:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800250c:	4322      	orrs	r2, r4
 800250e:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002510:	065a      	lsls	r2, r3, #25
 8002512:	d50f      	bpl.n	8002534 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002514:	6801      	ldr	r1, [r0, #0]
 8002516:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002518:	684a      	ldr	r2, [r1, #4]
 800251a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800251e:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002520:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002524:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002526:	d105      	bne.n	8002534 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002528:	684a      	ldr	r2, [r1, #4]
 800252a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800252c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002530:	4322      	orrs	r2, r4
 8002532:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002534:	061b      	lsls	r3, r3, #24
 8002536:	d506      	bpl.n	8002546 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002538:	6802      	ldr	r2, [r0, #0]
 800253a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800253c:	6853      	ldr	r3, [r2, #4]
 800253e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002542:	430b      	orrs	r3, r1
 8002544:	6053      	str	r3, [r2, #4]
 8002546:	bd10      	pop	{r4, pc}

08002548 <UART_WaitOnFlagUntilTimeout>:
{
 8002548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800254c:	9d06      	ldr	r5, [sp, #24]
 800254e:	4604      	mov	r4, r0
 8002550:	460f      	mov	r7, r1
 8002552:	4616      	mov	r6, r2
 8002554:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002556:	6821      	ldr	r1, [r4, #0]
 8002558:	69ca      	ldr	r2, [r1, #28]
 800255a:	ea37 0302 	bics.w	r3, r7, r2
 800255e:	bf0c      	ite	eq
 8002560:	2201      	moveq	r2, #1
 8002562:	2200      	movne	r2, #0
 8002564:	42b2      	cmp	r2, r6
 8002566:	d002      	beq.n	800256e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002568:	2000      	movs	r0, #0
}
 800256a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800256e:	1c6b      	adds	r3, r5, #1
 8002570:	d0f2      	beq.n	8002558 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002572:	b99d      	cbnz	r5, 800259c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800257c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	f022 0201 	bic.w	r2, r2, #1
 8002584:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002586:	2320      	movs	r3, #32
 8002588:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800258c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002590:	2300      	movs	r3, #0
 8002592:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002596:	2003      	movs	r0, #3
 8002598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800259c:	f7fe facc 	bl	8000b38 <HAL_GetTick>
 80025a0:	eba0 0008 	sub.w	r0, r0, r8
 80025a4:	4285      	cmp	r5, r0
 80025a6:	d2d6      	bcs.n	8002556 <UART_WaitOnFlagUntilTimeout+0xe>
 80025a8:	e7e4      	b.n	8002574 <UART_WaitOnFlagUntilTimeout+0x2c>

080025aa <UART_CheckIdleState>:
{
 80025aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80025ac:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ae:	2600      	movs	r6, #0
 80025b0:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80025b2:	f7fe fac1 	bl	8000b38 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80025bc:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025be:	d417      	bmi.n	80025f0 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80025c0:	6823      	ldr	r3, [r4, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	075b      	lsls	r3, r3, #29
 80025c6:	d50a      	bpl.n	80025de <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	2200      	movs	r2, #0
 80025d0:	462b      	mov	r3, r5
 80025d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80025d6:	4620      	mov	r0, r4
 80025d8:	f7ff ffb6 	bl	8002548 <UART_WaitOnFlagUntilTimeout>
 80025dc:	b9a0      	cbnz	r0, 8002608 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80025de:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80025e0:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80025e2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80025e6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80025ea:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80025ee:	e00c      	b.n	800260a <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	4632      	mov	r2, r6
 80025f8:	4603      	mov	r3, r0
 80025fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80025fe:	4620      	mov	r0, r4
 8002600:	f7ff ffa2 	bl	8002548 <UART_WaitOnFlagUntilTimeout>
 8002604:	2800      	cmp	r0, #0
 8002606:	d0db      	beq.n	80025c0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002608:	2003      	movs	r0, #3
}
 800260a:	b002      	add	sp, #8
 800260c:	bd70      	pop	{r4, r5, r6, pc}

0800260e <HAL_UART_Init>:
{
 800260e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002610:	4604      	mov	r4, r0
 8002612:	b360      	cbz	r0, 800266e <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002614:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002618:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800261c:	b91b      	cbnz	r3, 8002626 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800261e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002622:	f000 fcdd 	bl	8002fe0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002626:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002628:	2324      	movs	r3, #36	; 0x24
 800262a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800262e:	6813      	ldr	r3, [r2, #0]
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002636:	4620      	mov	r0, r4
 8002638:	f7ff fe2a 	bl	8002290 <UART_SetConfig>
 800263c:	2801      	cmp	r0, #1
 800263e:	d016      	beq.n	800266e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002642:	b113      	cbz	r3, 800264a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002644:	4620      	mov	r0, r4
 8002646:	f7ff ff2b 	bl	80024a0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800265a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002662:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002664:	601a      	str	r2, [r3, #0]
}
 8002666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800266a:	f7ff bf9e 	b.w	80025aa <UART_CheckIdleState>
}
 800266e:	2001      	movs	r0, #1
 8002670:	bd10      	pop	{r4, pc}

08002672 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002672:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002676:	2b21      	cmp	r3, #33	; 0x21
 8002678:	d127      	bne.n	80026ca <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 800267a:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800267e:	6802      	ldr	r2, [r0, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	b94b      	cbnz	r3, 8002698 <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002684:	6811      	ldr	r1, [r2, #0]
 8002686:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800268a:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800268c:	6811      	ldr	r1, [r2, #0]
 800268e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002692:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 8002694:	2000      	movs	r0, #0
 8002696:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002698:	6883      	ldr	r3, [r0, #8]
 800269a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80026a0:	d10e      	bne.n	80026c0 <UART_Transmit_IT+0x4e>
 80026a2:	6901      	ldr	r1, [r0, #16]
 80026a4:	b961      	cbnz	r1, 80026c0 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80026a6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80026aa:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80026ae:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80026b0:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80026b2:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 80026be:	e7e9      	b.n	8002694 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80026c0:	1c59      	adds	r1, r3, #1
 80026c2:	64c1      	str	r1, [r0, #76]	; 0x4c
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	8513      	strh	r3, [r2, #40]	; 0x28
 80026c8:	e7f3      	b.n	80026b2 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 80026ca:	2002      	movs	r0, #2
  }
}
 80026cc:	4770      	bx	lr

080026ce <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80026ce:	6801      	ldr	r1, [r0, #0]
{
 80026d0:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80026d2:	680b      	ldr	r3, [r1, #0]
 80026d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026d8:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026da:	2320      	movs	r3, #32
 80026dc:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 80026e0:	f7ff fdc9 	bl	8002276 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80026e4:	2000      	movs	r0, #0
 80026e6:	bd08      	pop	{r3, pc}

080026e8 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026e8:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80026ec:	2b22      	cmp	r3, #34	; 0x22
{
 80026ee:	b510      	push	{r4, lr}
 80026f0:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026f2:	d129      	bne.n	8002748 <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80026f4:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f6:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 80026f8:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002700:	ea02 0201 	and.w	r2, r2, r1
 8002704:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002706:	d11b      	bne.n	8002740 <UART_Receive_IT+0x58>
 8002708:	6901      	ldr	r1, [r0, #16]
 800270a:	b9c9      	cbnz	r1, 8002740 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 800270c:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 8002710:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8002712:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8002716:	3c01      	subs	r4, #1
 8002718:	b2a4      	uxth	r4, r4
 800271a:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 800271e:	b96c      	cbnz	r4, 800273c <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002720:	6803      	ldr	r3, [r0, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002728:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002732:	2320      	movs	r3, #32
 8002734:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8002738:	f000 f9ae 	bl	8002a98 <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 800273c:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 800273e:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002740:	1c59      	adds	r1, r3, #1
 8002742:	6541      	str	r1, [r0, #84]	; 0x54
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	e7e4      	b.n	8002712 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	f042 0208 	orr.w	r2, r2, #8
 800274e:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8002750:	2002      	movs	r0, #2
 8002752:	bd10      	pop	{r4, pc}

08002754 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002754:	6802      	ldr	r2, [r0, #0]
 8002756:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002758:	6811      	ldr	r1, [r2, #0]
{
 800275a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800275c:	f013 050f 	ands.w	r5, r3, #15
{
 8002760:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002762:	d107      	bne.n	8002774 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002764:	069e      	lsls	r6, r3, #26
 8002766:	d505      	bpl.n	8002774 <HAL_UART_IRQHandler+0x20>
 8002768:	068e      	lsls	r6, r1, #26
 800276a:	d503      	bpl.n	8002774 <HAL_UART_IRQHandler+0x20>
}
 800276c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002770:	f7ff bfba 	b.w	80026e8 <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8002774:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8002776:	2d00      	cmp	r5, #0
 8002778:	d05c      	beq.n	8002834 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800277a:	f010 0501 	ands.w	r5, r0, #1
 800277e:	d102      	bne.n	8002786 <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002780:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002784:	d056      	beq.n	8002834 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002786:	07d8      	lsls	r0, r3, #31
 8002788:	d507      	bpl.n	800279a <HAL_UART_IRQHandler+0x46>
 800278a:	05ce      	lsls	r6, r1, #23
 800278c:	d505      	bpl.n	800279a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800278e:	2001      	movs	r0, #1
 8002790:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002792:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002794:	f040 0001 	orr.w	r0, r0, #1
 8002798:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800279a:	0798      	lsls	r0, r3, #30
 800279c:	d506      	bpl.n	80027ac <HAL_UART_IRQHandler+0x58>
 800279e:	b12d      	cbz	r5, 80027ac <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80027a0:	2002      	movs	r0, #2
 80027a2:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027a4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80027a6:	f040 0004 	orr.w	r0, r0, #4
 80027aa:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027ac:	075e      	lsls	r6, r3, #29
 80027ae:	d506      	bpl.n	80027be <HAL_UART_IRQHandler+0x6a>
 80027b0:	b12d      	cbz	r5, 80027be <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80027b2:	2004      	movs	r0, #4
 80027b4:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027b6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80027b8:	f040 0002 	orr.w	r0, r0, #2
 80027bc:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80027be:	0718      	lsls	r0, r3, #28
 80027c0:	d507      	bpl.n	80027d2 <HAL_UART_IRQHandler+0x7e>
 80027c2:	068e      	lsls	r6, r1, #26
 80027c4:	d400      	bmi.n	80027c8 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80027c6:	b125      	cbz	r5, 80027d2 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80027c8:	2008      	movs	r0, #8
 80027ca:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027cc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80027ce:	4302      	orrs	r2, r0
 80027d0:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027d2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80027d4:	2a00      	cmp	r2, #0
 80027d6:	d050      	beq.n	800287a <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027d8:	0698      	lsls	r0, r3, #26
 80027da:	d504      	bpl.n	80027e6 <HAL_UART_IRQHandler+0x92>
 80027dc:	068a      	lsls	r2, r1, #26
 80027de:	d502      	bpl.n	80027e6 <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 80027e0:	4620      	mov	r0, r4
 80027e2:	f7ff ff81 	bl	80026e8 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80027e6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80027e8:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 80027ea:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80027ec:	d404      	bmi.n	80027f8 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80027f2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80027f6:	d019      	beq.n	800282c <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 80027f8:	f7ff fccb 	bl	8002192 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	0656      	lsls	r6, r2, #25
 8002802:	d50f      	bpl.n	8002824 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002804:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002806:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800280c:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800280e:	b148      	cbz	r0, 8002824 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002810:	4b1a      	ldr	r3, [pc, #104]	; (800287c <HAL_UART_IRQHandler+0x128>)
 8002812:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002814:	f7fe fa12 	bl	8000c3c <HAL_DMA_Abort_IT>
 8002818:	b378      	cbz	r0, 800287a <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800281a:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 800281c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002820:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002822:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002824:	4620      	mov	r0, r4
 8002826:	f7ff fd27 	bl	8002278 <HAL_UART_ErrorCallback>
 800282a:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800282c:	f7ff fd24 	bl	8002278 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002830:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002832:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002834:	02dd      	lsls	r5, r3, #11
 8002836:	d50e      	bpl.n	8002856 <HAL_UART_IRQHandler+0x102>
 8002838:	0246      	lsls	r6, r0, #9
 800283a:	d50c      	bpl.n	8002856 <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 800283c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002840:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8002842:	2320      	movs	r3, #32
 8002844:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 8002848:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 800284a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 800284e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002852:	f000 b815 	b.w	8002880 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002856:	061d      	lsls	r5, r3, #24
 8002858:	d506      	bpl.n	8002868 <HAL_UART_IRQHandler+0x114>
 800285a:	0608      	lsls	r0, r1, #24
 800285c:	d504      	bpl.n	8002868 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 800285e:	4620      	mov	r0, r4
}
 8002860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8002864:	f7ff bf05 	b.w	8002672 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002868:	065a      	lsls	r2, r3, #25
 800286a:	d506      	bpl.n	800287a <HAL_UART_IRQHandler+0x126>
 800286c:	064b      	lsls	r3, r1, #25
 800286e:	d504      	bpl.n	800287a <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8002870:	4620      	mov	r0, r4
}
 8002872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 8002876:	f7ff bf2a 	b.w	80026ce <UART_EndTransmit_IT>
 800287a:	bd70      	pop	{r4, r5, r6, pc}
 800287c:	0800227b 	.word	0x0800227b

08002880 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002880:	4770      	bx	lr
	...

08002884 <random_values>:
static void MX_TIM2_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
/*funkcje z przedrostkiem random_ sa na potrzeby testow*/
void random_values(void){
 8002884:	b538      	push	{r3, r4, r5, lr}
	ADC_T=(rand()%(32760)+4095)/10;
 8002886:	f000 fccb 	bl	8003220 <rand>
 800288a:	f647 74f8 	movw	r4, #32760	; 0x7ff8
 800288e:	fb90 f3f4 	sdiv	r3, r0, r4
 8002892:	fb03 0014 	mls	r0, r3, r4, r0
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <random_values+0x3c>)
 8002898:	250a      	movs	r5, #10
 800289a:	f600 70ff 	addw	r0, r0, #4095	; 0xfff
 800289e:	fb90 f0f5 	sdiv	r0, r0, r5
 80028a2:	8018      	strh	r0, [r3, #0]
	ADC_RH=(rand()%(32760)+4095)/10;
 80028a4:	f000 fcbc 	bl	8003220 <rand>
 80028a8:	fb90 f3f4 	sdiv	r3, r0, r4
 80028ac:	fb03 0014 	mls	r0, r3, r4, r0
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <random_values+0x40>)
 80028b2:	f600 70ff 	addw	r0, r0, #4095	; 0xfff
 80028b6:	fb90 f0f5 	sdiv	r0, r0, r5
 80028ba:	8018      	strh	r0, [r3, #0]
 80028bc:	bd38      	pop	{r3, r4, r5, pc}
 80028be:	bf00      	nop
 80028c0:	200001d8 	.word	0x200001d8
 80028c4:	200000a4 	.word	0x200000a4

080028c8 <random_changes>:
}
void random_changes(void){
 80028c8:	b570      	push	{r4, r5, r6, lr}
	int16_t d=0;
	do{
		d=rand()%41-20;
		if(ADC_T+d>=410&&ADC_T<=3686){
 80028ca:	4c1f      	ldr	r4, [pc, #124]	; (8002948 <random_changes+0x80>)
		d=rand()%41-20;
 80028cc:	2529      	movs	r5, #41	; 0x29
 80028ce:	4626      	mov	r6, r4
 80028d0:	f000 fca6 	bl	8003220 <rand>
 80028d4:	fb90 f3f5 	sdiv	r3, r0, r5
 80028d8:	fb03 0015 	mls	r0, r3, r5, r0
 80028dc:	3814      	subs	r0, #20
		if(ADC_T+d>=410&&ADC_T<=3686){
 80028de:	8823      	ldrh	r3, [r4, #0]
		d=rand()%41-20;
 80028e0:	b280      	uxth	r0, r0
		if(ADC_T+d>=410&&ADC_T<=3686){
 80028e2:	fa03 f280 	sxtah	r2, r3, r0
 80028e6:	f5b2 7fcd 	cmp.w	r2, #410	; 0x19a
 80028ea:	db05      	blt.n	80028f8 <random_changes+0x30>
 80028ec:	f640 6266 	movw	r2, #3686	; 0xe66
 80028f0:	4293      	cmp	r3, r2
			ADC_T+=d;
 80028f2:	bf9c      	itt	ls
 80028f4:	18c0      	addls	r0, r0, r3
 80028f6:	8020      	strhls	r0, [r4, #0]
		}
	}while(ADC_T<410||ADC_T>3686);
 80028f8:	8833      	ldrh	r3, [r6, #0]
 80028fa:	f5a3 73cd 	sub.w	r3, r3, #410	; 0x19a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	f640 42cc 	movw	r2, #3276	; 0xccc
 8002904:	4293      	cmp	r3, r2
 8002906:	d8e3      	bhi.n	80028d0 <random_changes+0x8>
	do{
		d=rand()%41-20;
		if(ADC_RH+d>=410&&ADC_RH<=3686){
 8002908:	4c10      	ldr	r4, [pc, #64]	; (800294c <random_changes+0x84>)
		d=rand()%41-20;
 800290a:	2529      	movs	r5, #41	; 0x29
 800290c:	4626      	mov	r6, r4
 800290e:	f000 fc87 	bl	8003220 <rand>
 8002912:	fb90 f3f5 	sdiv	r3, r0, r5
 8002916:	fb03 0015 	mls	r0, r3, r5, r0
 800291a:	3814      	subs	r0, #20
		if(ADC_RH+d>=410&&ADC_RH<=3686){
 800291c:	8823      	ldrh	r3, [r4, #0]
		d=rand()%41-20;
 800291e:	b280      	uxth	r0, r0
		if(ADC_RH+d>=410&&ADC_RH<=3686){
 8002920:	fa03 f280 	sxtah	r2, r3, r0
 8002924:	f5b2 7fcd 	cmp.w	r2, #410	; 0x19a
 8002928:	db05      	blt.n	8002936 <random_changes+0x6e>
 800292a:	f640 6266 	movw	r2, #3686	; 0xe66
 800292e:	4293      	cmp	r3, r2
			ADC_RH+=d;
 8002930:	bf9c      	itt	ls
 8002932:	18c0      	addls	r0, r0, r3
 8002934:	8020      	strhls	r0, [r4, #0]
		}
	}while(ADC_RH<410||ADC_RH>3686);
 8002936:	8833      	ldrh	r3, [r6, #0]
 8002938:	f5a3 73cd 	sub.w	r3, r3, #410	; 0x19a
 800293c:	b29b      	uxth	r3, r3
 800293e:	f640 42cc 	movw	r2, #3276	; 0xccc
 8002942:	4293      	cmp	r3, r2
 8002944:	d8e3      	bhi.n	800290e <random_changes+0x46>
}
 8002946:	bd70      	pop	{r4, r5, r6, pc}
 8002948:	200001d8 	.word	0x200001d8
 800294c:	200000a4 	.word	0x200000a4

08002950 <RH_T_calculate>:

void RH_T_calculate(void){
 8002950:	b508      	push	{r3, lr}
	float V_RH=0.0f, V_T=0.0f;
	/*obliczanie napiec na podstawie wartosci z przetwornika ADC*/
	V_T=ADC_T*VDD/ADC_12B_MAX;
 8002952:	4b31      	ldr	r3, [pc, #196]	; (8002a18 <RH_T_calculate+0xc8>)
void RH_T_calculate(void){
 8002954:	ed2d 8b02 	vpush	{d8}
	V_T=ADC_T*VDD/ADC_12B_MAX;
 8002958:	8818      	ldrh	r0, [r3, #0]
 800295a:	f7fd fde3 	bl	8000524 <__aeabi_i2d>
 800295e:	a328      	add	r3, pc, #160	; (adr r3, 8002a00 <RH_T_calculate+0xb0>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f7fd fe44 	bl	80005f0 <__aeabi_dmul>
 8002968:	a327      	add	r3, pc, #156	; (adr r3, 8002a08 <RH_T_calculate+0xb8>)
 800296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296e:	f7fd ff69 	bl	8000844 <__aeabi_ddiv>
 8002972:	f7fe f84f 	bl	8000a14 <__aeabi_d2f>
	V_RH=ADC_RH*VDD/ADC_12B_MAX;
 8002976:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <RH_T_calculate+0xcc>)
	V_T=ADC_T*VDD/ADC_12B_MAX;
 8002978:	ee08 0a10 	vmov	s16, r0
	V_RH=ADC_RH*VDD/ADC_12B_MAX;
 800297c:	8818      	ldrh	r0, [r3, #0]
 800297e:	f7fd fdd1 	bl	8000524 <__aeabi_i2d>
 8002982:	a31f      	add	r3, pc, #124	; (adr r3, 8002a00 <RH_T_calculate+0xb0>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	f7fd fe32 	bl	80005f0 <__aeabi_dmul>
 800298c:	a31e      	add	r3, pc, #120	; (adr r3, 8002a08 <RH_T_calculate+0xb8>)
 800298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002992:	f7fd ff57 	bl	8000844 <__aeabi_ddiv>
 8002996:	f7fe f83d 	bl	8000a14 <__aeabi_d2f>
	/*wilgotnosc w procentach*/
	RH=-12.5f+125*V_RH/VDD;
 800299a:	eddf 7a21 	vldr	s15, [pc, #132]	; 8002a20 <RH_T_calculate+0xd0>
 800299e:	ee07 0a10 	vmov	s14, r0
 80029a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a6:	ee17 0a90 	vmov	r0, s15
 80029aa:	f7fd fdcd 	bl	8000548 <__aeabi_f2d>
 80029ae:	a314      	add	r3, pc, #80	; (adr r3, 8002a00 <RH_T_calculate+0xb0>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fd ff46 	bl	8000844 <__aeabi_ddiv>
 80029b8:	2200      	movs	r2, #0
 80029ba:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <RH_T_calculate+0xd4>)
 80029bc:	f7fd fc64 	bl	8000288 <__aeabi_dsub>
 80029c0:	f7fe f828 	bl	8000a14 <__aeabi_d2f>
	/*temperatura w Stopniach celsjusza*/
	T=-66.875f+218.75f*V_T/VDD;
 80029c4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8002a28 <RH_T_calculate+0xd8>
	RH=-12.5f+125*V_RH/VDD;
 80029c8:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <RH_T_calculate+0xdc>)
	T=-66.875f+218.75f*V_T/VDD;
 80029ca:	ee68 7a27 	vmul.f32	s15, s16, s15
	RH=-12.5f+125*V_RH/VDD;
 80029ce:	6018      	str	r0, [r3, #0]
	T=-66.875f+218.75f*V_T/VDD;
 80029d0:	ee17 0a90 	vmov	r0, s15
 80029d4:	f7fd fdb8 	bl	8000548 <__aeabi_f2d>
 80029d8:	a309      	add	r3, pc, #36	; (adr r3, 8002a00 <RH_T_calculate+0xb0>)
 80029da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029de:	f7fd ff31 	bl	8000844 <__aeabi_ddiv>
 80029e2:	a30b      	add	r3, pc, #44	; (adr r3, 8002a10 <RH_T_calculate+0xc0>)
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	f7fd fc4e 	bl	8000288 <__aeabi_dsub>
 80029ec:	f7fe f812 	bl	8000a14 <__aeabi_d2f>
}
 80029f0:	ecbd 8b02 	vpop	{d8}
	T=-66.875f+218.75f*V_T/VDD;
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <RH_T_calculate+0xe0>)
 80029f6:	6018      	str	r0, [r3, #0]
}
 80029f8:	bd08      	pop	{r3, pc}
 80029fa:	bf00      	nop
 80029fc:	f3af 8000 	nop.w
 8002a00:	66666666 	.word	0x66666666
 8002a04:	400a6666 	.word	0x400a6666
 8002a08:	00000000 	.word	0x00000000
 8002a0c:	40affe00 	.word	0x40affe00
 8002a10:	00000000 	.word	0x00000000
 8002a14:	4050b800 	.word	0x4050b800
 8002a18:	200001d8 	.word	0x200001d8
 8002a1c:	200000a4 	.word	0x200000a4
 8002a20:	42fa0000 	.word	0x42fa0000
 8002a24:	40290000 	.word	0x40290000
 8002a28:	435ac000 	.word	0x435ac000
 8002a2c:	2000008c 	.word	0x2000008c
 8002a30:	20000090 	.word	0x20000090

08002a34 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002a34:	b530      	push	{r4, r5, lr}
 8002a36:	b095      	sub	sp, #84	; 0x54
	uint8_t data[50]={0};
 8002a38:	2232      	movs	r2, #50	; 0x32
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	a807      	add	r0, sp, #28
 8002a3e:	f000 fbbf 	bl	80031c0 <memset>
	uint8_t size=0;
	RH_T_calculate();
 8002a42:	f7ff ff85 	bl	8002950 <RH_T_calculate>
	size=sprintf(&data, "Wilgotnosc: %.2f%c.\r\nTemperatura: %.2f%s.\r\n\r\n", RH,'%', T,"*C");
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	f7fd fd7d 	bl	8000548 <__aeabi_f2d>
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002a50:	9304      	str	r3, [sp, #16]
 8002a52:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002a54:	4604      	mov	r4, r0
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	460d      	mov	r5, r1
 8002a5a:	f7fd fd75 	bl	8000548 <__aeabi_f2d>
 8002a5e:	2325      	movs	r3, #37	; 0x25
 8002a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	4622      	mov	r2, r4
 8002a68:	462b      	mov	r3, r5
 8002a6a:	4909      	ldr	r1, [pc, #36]	; (8002a90 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002a6c:	a807      	add	r0, sp, #28
 8002a6e:	f000 fc11 	bl	8003294 <siprintf>
	HAL_UART_Transmit_IT(&huart2, data, size);
 8002a72:	a907      	add	r1, sp, #28
 8002a74:	b2c2      	uxtb	r2, r0
 8002a76:	4807      	ldr	r0, [pc, #28]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002a78:	f7ff fb98 	bl	80021ac <HAL_UART_Transmit_IT>
	random_changes();
 8002a7c:	f7ff ff24 	bl	80028c8 <random_changes>
}
 8002a80:	b015      	add	sp, #84	; 0x54
 8002a82:	bd30      	pop	{r4, r5, pc}
 8002a84:	2000008c 	.word	0x2000008c
 8002a88:	08003bb2 	.word	0x08003bb2
 8002a8c:	20000090 	.word	0x20000090
 8002a90:	08003b84 	.word	0x08003b84
 8002a94:	20000168 	.word	0x20000168

08002a98 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002a98:	b500      	push	{lr}
 8002a9a:	b08f      	sub	sp, #60	; 0x3c
	uint8_t duty=0, time=0;
	uint8_t data[50]={0};
 8002a9c:	2232      	movs	r2, #50	; 0x32
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	a801      	add	r0, sp, #4
 8002aa2:	f000 fb8d 	bl	80031c0 <memset>
	 * 1 znak - kierunek silnikow (pion [v] lub poziom [h])
	 * 2 znak - wypelnienie pwm cyfra dziesiatek
	 * 3 znak - wypelnienie pwm cyfra jednosci
	 * 4 znak - czas trwania ruchu w sekundach
	 * */
	if(received[1]>='0'&&received[1]<='9'){
 8002aa6:	4922      	ldr	r1, [pc, #136]	; (8002b30 <HAL_UART_RxCpltCallback+0x98>)
 8002aa8:	784a      	ldrb	r2, [r1, #1]
 8002aaa:	3a30      	subs	r2, #48	; 0x30
 8002aac:	b2d3      	uxtb	r3, r2
 8002aae:	2b09      	cmp	r3, #9
		duty+=(received[1]-'0')*10;
	}
	if(received[2]>='0'&&received[2]<='9'){
 8002ab0:	788b      	ldrb	r3, [r1, #2]
		duty+=(received[1]-'0')*10;
 8002ab2:	bf98      	it	ls
 8002ab4:	eb02 0282 	addls.w	r2, r2, r2, lsl #2
	if(received[2]>='0'&&received[2]<='9'){
 8002ab8:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
		duty+=(received[1]-'0')*10;
 8002abc:	bf98      	it	ls
 8002abe:	0052      	lslls	r2, r2, #1
	if(received[2]>='0'&&received[2]<='9'){
 8002ac0:	b2db      	uxtb	r3, r3
		duty+=(received[1]-'0')*10;
 8002ac2:	bf94      	ite	ls
 8002ac4:	b2d2      	uxtbls	r2, r2
	uint8_t duty=0, time=0;
 8002ac6:	2200      	movhi	r2, #0
	if(received[2]>='0'&&received[2]<='9'){
 8002ac8:	2b09      	cmp	r3, #9
		duty+=received[2]-'0';
 8002aca:	bf98      	it	ls
 8002acc:	18d2      	addls	r2, r2, r3
	}
	if(received[3]>='0'&&received[3]<='9'){
 8002ace:	78cb      	ldrb	r3, [r1, #3]
 8002ad0:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8002ad4:	b2db      	uxtb	r3, r3
		duty+=received[2]-'0';
 8002ad6:	bf98      	it	ls
 8002ad8:	b2d2      	uxtbls	r2, r2
	uint8_t duty=0, time=0;
 8002ada:	2b0a      	cmp	r3, #10
 8002adc:	bf28      	it	cs
 8002ade:	2300      	movcs	r3, #0
		time=received[3]-'0';
	}
	if(duty<50){
 8002ae0:	2a31      	cmp	r2, #49	; 0x31
 8002ae2:	d810      	bhi.n	8002b06 <HAL_UART_RxCpltCallback+0x6e>
		size=sprintf(&data,"Za male wypelnienie PWM.\r\n");
 8002ae4:	4913      	ldr	r1, [pc, #76]	; (8002b34 <HAL_UART_RxCpltCallback+0x9c>)
 8002ae6:	a801      	add	r0, sp, #4
 8002ae8:	f000 fbf8 	bl	80032dc <strcpy>
		HAL_UART_Transmit_IT(&huart2, data, size);
 8002aec:	221a      	movs	r2, #26
		} else if(received[0]=='h'){
			/*obsluga ruchu w poziomie*/
			TIM3->CCR1=duty;
			TIM3->CCR2=duty;
			size=sprintf(&data,"Ruch w poziomie z D=%d przez %ds.\r\n", duty, time);
			HAL_UART_Transmit_IT(&huart2, data, size);
 8002aee:	a901      	add	r1, sp, #4
 8002af0:	4811      	ldr	r0, [pc, #68]	; (8002b38 <HAL_UART_RxCpltCallback+0xa0>)
 8002af2:	f7ff fb5b 	bl	80021ac <HAL_UART_Transmit_IT>
		}
	}
	duty=0;
	time=0;
	HAL_UART_Receive_IT(&huart2, received, SIZE);
 8002af6:	2204      	movs	r2, #4
 8002af8:	490d      	ldr	r1, [pc, #52]	; (8002b30 <HAL_UART_RxCpltCallback+0x98>)
 8002afa:	480f      	ldr	r0, [pc, #60]	; (8002b38 <HAL_UART_RxCpltCallback+0xa0>)
 8002afc:	f7ff fb77 	bl	80021ee <HAL_UART_Receive_IT>
}
 8002b00:	b00f      	add	sp, #60	; 0x3c
 8002b02:	f85d fb04 	ldr.w	pc, [sp], #4
		if(received[0]=='v'){
 8002b06:	7809      	ldrb	r1, [r1, #0]
 8002b08:	2976      	cmp	r1, #118	; 0x76
 8002b0a:	d109      	bne.n	8002b20 <HAL_UART_RxCpltCallback+0x88>
			TIM1->CCR1=duty;
 8002b0c:	490b      	ldr	r1, [pc, #44]	; (8002b3c <HAL_UART_RxCpltCallback+0xa4>)
 8002b0e:	634a      	str	r2, [r1, #52]	; 0x34
			TIM1->CCR2=duty;
 8002b10:	638a      	str	r2, [r1, #56]	; 0x38
			TIM1->CCR4=duty;
 8002b12:	640a      	str	r2, [r1, #64]	; 0x40
			size=sprintf(&data,"Ruch w pionie z D=%d przez %ds.\r\n", duty, time);
 8002b14:	490a      	ldr	r1, [pc, #40]	; (8002b40 <HAL_UART_RxCpltCallback+0xa8>)
			size=sprintf(&data,"Ruch w poziomie z D=%d przez %ds.\r\n", duty, time);
 8002b16:	a801      	add	r0, sp, #4
 8002b18:	f000 fbbc 	bl	8003294 <siprintf>
			HAL_UART_Transmit_IT(&huart2, data, size);
 8002b1c:	b2c2      	uxtb	r2, r0
 8002b1e:	e7e6      	b.n	8002aee <HAL_UART_RxCpltCallback+0x56>
		} else if(received[0]=='h'){
 8002b20:	2968      	cmp	r1, #104	; 0x68
 8002b22:	d1e8      	bne.n	8002af6 <HAL_UART_RxCpltCallback+0x5e>
			TIM3->CCR1=duty;
 8002b24:	4907      	ldr	r1, [pc, #28]	; (8002b44 <HAL_UART_RxCpltCallback+0xac>)
 8002b26:	634a      	str	r2, [r1, #52]	; 0x34
			TIM3->CCR2=duty;
 8002b28:	638a      	str	r2, [r1, #56]	; 0x38
			size=sprintf(&data,"Ruch w poziomie z D=%d przez %ds.\r\n", duty, time);
 8002b2a:	4907      	ldr	r1, [pc, #28]	; (8002b48 <HAL_UART_RxCpltCallback+0xb0>)
 8002b2c:	e7f3      	b.n	8002b16 <HAL_UART_RxCpltCallback+0x7e>
 8002b2e:	bf00      	nop
 8002b30:	200001da 	.word	0x200001da
 8002b34:	08003bb5 	.word	0x08003bb5
 8002b38:	20000168 	.word	0x20000168
 8002b3c:	40012c00 	.word	0x40012c00
 8002b40:	08003bd0 	.word	0x08003bd0
 8002b44:	40000400 	.word	0x40000400
 8002b48:	08003bf2 	.word	0x08003bf2

08002b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b4c:	b530      	push	{r4, r5, lr}
 8002b4e:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b50:	2228      	movs	r2, #40	; 0x28
 8002b52:	2100      	movs	r1, #0
 8002b54:	a806      	add	r0, sp, #24
 8002b56:	f000 fb33 	bl	80031c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b5a:	2214      	movs	r2, #20
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	a801      	add	r0, sp, #4
 8002b60:	f000 fb2e 	bl	80031c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b64:	2258      	movs	r2, #88	; 0x58
 8002b66:	2100      	movs	r1, #0
 8002b68:	a810      	add	r0, sp, #64	; 0x40
 8002b6a:	f000 fb29 	bl	80031c0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b72:	2310      	movs	r3, #16
 8002b74:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b7a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b7c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b7e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b80:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b84:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b86:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b88:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b8a:	f7fe f951 	bl	8000e30 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b8e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b90:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b92:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b94:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b9a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b9c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b9e:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ba0:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ba2:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ba4:	f7fe fbf2 	bl	800138c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <SystemClock_Config+0x74>)
 8002baa:	9310      	str	r3, [sp, #64]	; 0x40
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bac:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002bae:	9413      	str	r4, [sp, #76]	; 0x4c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002bb0:	941d      	str	r4, [sp, #116]	; 0x74
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8002bb2:	941e      	str	r4, [sp, #120]	; 0x78
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8002bb4:	941f      	str	r4, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bb6:	f7fe fcc3 	bl	8001540 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002bba:	b027      	add	sp, #156	; 0x9c
 8002bbc:	bd30      	pop	{r4, r5, pc}
 8002bbe:	bf00      	nop
 8002bc0:	00301002 	.word	0x00301002

08002bc4 <main>:
{
 8002bc4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002bc8:	b0a1      	sub	sp, #132	; 0x84
  HAL_Init();
 8002bca:	f7fd ff97 	bl	8000afc <HAL_Init>
  SystemClock_Config();
 8002bce:	f7ff ffbd 	bl	8002b4c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd2:	2214      	movs	r2, #20
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	a815      	add	r0, sp, #84	; 0x54
 8002bd8:	f000 faf2 	bl	80031c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bdc:	4ba8      	ldr	r3, [pc, #672]	; (8002e80 <main+0x2bc>)
  huart2.Instance = USART2;
 8002bde:	4fa9      	ldr	r7, [pc, #676]	; (8002e84 <main+0x2c0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be0:	695a      	ldr	r2, [r3, #20]
  htim2.Instance = TIM2;
 8002be2:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 8002ea0 <main+0x2dc>
  htim1.Instance = TIM1;
 8002be6:	4da8      	ldr	r5, [pc, #672]	; (8002e88 <main+0x2c4>)
 8002be8:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 8002ea4 <main+0x2e0>
  htim3.Instance = TIM3;
 8002bec:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8002ea8 <main+0x2e4>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002bf4:	615a      	str	r2, [r3, #20]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002bfc:	9203      	str	r2, [sp, #12]
 8002bfe:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002c06:	615a      	str	r2, [r3, #20]
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002c0e:	9204      	str	r2, [sp, #16]
 8002c10:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c18:	615a      	str	r2, [r3, #20]
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002c20:	9205      	str	r2, [sp, #20]
 8002c22:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c2a:	615a      	str	r2, [r3, #20]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c32:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c34:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c36:	2120      	movs	r1, #32
 8002c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8002c3e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c42:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c44:	f7fe f8ee 	bl	8000e24 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c48:	4b90      	ldr	r3, [pc, #576]	; (8002e8c <main+0x2c8>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c4a:	4891      	ldr	r0, [pc, #580]	; (8002e90 <main+0x2cc>)
  GPIO_InitStruct.Pin = B1_Pin;
 8002c4c:	9615      	str	r6, [sp, #84]	; 0x54
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c4e:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c50:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c54:	f7fe f816 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002c58:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c5a:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Pin = LD2_Pin;
 8002c5c:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c62:	2301      	movs	r3, #1
 8002c64:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c68:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c6a:	f7fe f80b 	bl	8000c84 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8002c6e:	4a89      	ldr	r2, [pc, #548]	; (8002e94 <main+0x2d0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c70:	60bc      	str	r4, [r7, #8]
  huart2.Init.BaudRate = 115200;
 8002c72:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c76:	f04f 0b0c 	mov.w	fp, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c7a:	4638      	mov	r0, r7
  huart2.Init.BaudRate = 115200;
 8002c7c:	e887 000c 	stmia.w	r7, {r2, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c80:	60fc      	str	r4, [r7, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c82:	613c      	str	r4, [r7, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c84:	f8c7 b014 	str.w	fp, [r7, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c88:	61bc      	str	r4, [r7, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c8a:	61fc      	str	r4, [r7, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c8c:	623c      	str	r4, [r7, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c8e:	627c      	str	r4, [r7, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c90:	f7ff fcbd 	bl	800260e <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c94:	2210      	movs	r2, #16
 8002c96:	4621      	mov	r1, r4
 8002c98:	a815      	add	r0, sp, #84	; 0x54
 8002c9a:	f000 fa91 	bl	80031c0 <memset>
  htim2.Init.Prescaler = 7200-1;
 8002c9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002ca2:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002ca6:	e888 000a 	stmia.w	r8, {r1, r3}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002caa:	4640      	mov	r0, r8
  htim2.Init.Period = 10000-1;
 8002cac:	f242 730f 	movw	r3, #9999	; 0x270f
 8002cb0:	f8c8 300c 	str.w	r3, [r8, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb4:	940e      	str	r4, [sp, #56]	; 0x38
 8002cb6:	940f      	str	r4, [sp, #60]	; 0x3c
 8002cb8:	9410      	str	r4, [sp, #64]	; 0x40
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cba:	f8c8 4008 	str.w	r4, [r8, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cbe:	f8c8 4010 	str.w	r4, [r8, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc2:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cc6:	f7fe fea9 	bl	8001a1c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cce:	a915      	add	r1, sp, #84	; 0x54
 8002cd0:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cd2:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cd4:	f7ff f806 	bl	8001ce4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cd8:	a90e      	add	r1, sp, #56	; 0x38
 8002cda:	4640      	mov	r0, r8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cdc:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cde:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ce0:	f7ff f9e4 	bl	80020ac <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	a80a      	add	r0, sp, #40	; 0x28
 8002cea:	f000 fa69 	bl	80031c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cee:	221c      	movs	r2, #28
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf4:	9407      	str	r4, [sp, #28]
 8002cf6:	9408      	str	r4, [sp, #32]
 8002cf8:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cfa:	f000 fa61 	bl	80031c0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cfe:	222c      	movs	r2, #44	; 0x2c
 8002d00:	4621      	mov	r1, r4
 8002d02:	a815      	add	r0, sp, #84	; 0x54
 8002d04:	f000 fa5c 	bl	80031c0 <memset>
  htim1.Init.Prescaler = 1439;
 8002d08:	f240 539f 	movw	r3, #1439	; 0x59f
 8002d0c:	606b      	str	r3, [r5, #4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d0e:	4628      	mov	r0, r5
  htim1.Init.Period = 99;
 8002d10:	2363      	movs	r3, #99	; 0x63
 8002d12:	60eb      	str	r3, [r5, #12]
  htim1.Instance = TIM1;
 8002d14:	f8c5 9000 	str.w	r9, [r5]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d18:	60ac      	str	r4, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d1a:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d1c:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d1e:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d20:	f7fe fe7c 	bl	8001a1c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d28:	a90a      	add	r1, sp, #40	; 0x28
 8002d2a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d2c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d2e:	f7fe ffd9 	bl	8001ce4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d32:	4628      	mov	r0, r5
 8002d34:	f7fe fe8c 	bl	8001a50 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d38:	a907      	add	r1, sp, #28
 8002d3a:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d3c:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d3e:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d40:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d42:	f7ff f9b3 	bl	80020ac <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d46:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d48:	4622      	mov	r2, r4
 8002d4a:	a90e      	add	r1, sp, #56	; 0x38
 8002d4c:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d4e:	930e      	str	r3, [sp, #56]	; 0x38
 8002d50:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002d52:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d54:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d56:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d58:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d5a:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d5c:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d5e:	f7ff f91d 	bl	8001f9c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d62:	2204      	movs	r2, #4
 8002d64:	a90e      	add	r1, sp, #56	; 0x38
 8002d66:	4628      	mov	r0, r5
 8002d68:	f7ff f918 	bl	8001f9c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d6c:	465a      	mov	r2, fp
 8002d6e:	a90e      	add	r1, sp, #56	; 0x38
 8002d70:	4628      	mov	r0, r5
 8002d72:	f7ff f913 	bl	8001f9c <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d7a:	a915      	add	r1, sp, #84	; 0x54
 8002d7c:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d7e:	921d      	str	r2, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d80:	961a      	str	r6, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d82:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d84:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d86:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d88:	9418      	str	r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d8a:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d8c:	941b      	str	r4, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d8e:	941c      	str	r4, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d90:	941e      	str	r4, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d92:	941f      	str	r4, [sp, #124]	; 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d94:	f7ff f9b4 	bl	8002100 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8002d98:	4628      	mov	r0, r5
 8002d9a:	f000 f8e1 	bl	8002f60 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d9e:	2210      	movs	r2, #16
 8002da0:	4621      	mov	r1, r4
 8002da2:	a80e      	add	r0, sp, #56	; 0x38
  htim3.Instance = TIM3;
 8002da4:	4e3c      	ldr	r6, [pc, #240]	; (8002e98 <main+0x2d4>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002da6:	f000 fa0b 	bl	80031c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002daa:	221c      	movs	r2, #28
 8002dac:	4621      	mov	r1, r4
 8002dae:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db0:	940a      	str	r4, [sp, #40]	; 0x28
 8002db2:	940b      	str	r4, [sp, #44]	; 0x2c
 8002db4:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002db6:	f000 fa03 	bl	80031c0 <memset>
  htim3.Init.Prescaler = 1439;
 8002dba:	f240 539f 	movw	r3, #1439	; 0x59f
 8002dbe:	6073      	str	r3, [r6, #4]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002dc0:	4630      	mov	r0, r6
  htim3.Init.Period = 99;
 8002dc2:	2363      	movs	r3, #99	; 0x63
 8002dc4:	60f3      	str	r3, [r6, #12]
  htim3.Instance = TIM3;
 8002dc6:	f8c6 a000 	str.w	sl, [r6]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dca:	60b4      	str	r4, [r6, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dcc:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dce:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002dd0:	f7fe fe24 	bl	8001a1c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002dd8:	a90e      	add	r1, sp, #56	; 0x38
 8002dda:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ddc:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002dde:	f7fe ff81 	bl	8001ce4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002de2:	4630      	mov	r0, r6
 8002de4:	f7fe fe34 	bl	8001a50 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002de8:	a90a      	add	r1, sp, #40	; 0x28
 8002dea:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dec:	940a      	str	r4, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dee:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002df0:	f7ff f95c 	bl	80020ac <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002df4:	9b01      	ldr	r3, [sp, #4]
 8002df6:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002df8:	4622      	mov	r2, r4
 8002dfa:	a915      	add	r1, sp, #84	; 0x54
 8002dfc:	4630      	mov	r0, r6
  sConfigOC.Pulse = 0;
 8002dfe:	9416      	str	r4, [sp, #88]	; 0x58
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e00:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e02:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e04:	f7ff f8ca 	bl	8001f9c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e08:	2204      	movs	r2, #4
 8002e0a:	a915      	add	r1, sp, #84	; 0x54
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	f7ff f8c5 	bl	8001f9c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8002e12:	4630      	mov	r0, r6
 8002e14:	f000 f8a4 	bl	8002f60 <HAL_TIM_MspPostInit>
  srand(time(NULL));
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f000 fa67 	bl	80032ec <time>
 8002e1e:	f000 f9d7 	bl	80031d0 <srand>
  random_values();
 8002e22:	f7ff fd2f 	bl	8002884 <random_values>
  HAL_TIM_Base_Start_IT(&htim2);
 8002e26:	4640      	mov	r0, r8
 8002e28:	f7fe fcce 	bl	80017c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	4628      	mov	r0, r5
 8002e30:	f7ff f81a 	bl	8001e68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002e34:	2104      	movs	r1, #4
 8002e36:	4628      	mov	r0, r5
 8002e38:	f7ff f816 	bl	8001e68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002e3c:	4659      	mov	r1, fp
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f7ff f812 	bl	8001e68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002e44:	4621      	mov	r1, r4
 8002e46:	4630      	mov	r0, r6
 8002e48:	f7ff f80e 	bl	8001e68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002e4c:	2104      	movs	r1, #4
 8002e4e:	4630      	mov	r0, r6
 8002e50:	f7ff f80a 	bl	8001e68 <HAL_TIM_PWM_Start>
  TIM1->CCR1=75;
 8002e54:	234b      	movs	r3, #75	; 0x4b
 8002e56:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
  HAL_Delay(7000);
 8002e5a:	f641 3058 	movw	r0, #7000	; 0x1b58
  TIM1->CCR2=75;
 8002e5e:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
  TIM1->CCR4=75;
 8002e62:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  TIM3->CCR1=75;
 8002e66:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
  TIM3->CCR2=75;
 8002e6a:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  HAL_Delay(7000);
 8002e6e:	f7fd fe69 	bl	8000b44 <HAL_Delay>
  HAL_UART_Receive_IT(&huart2, received, SIZE);
 8002e72:	2204      	movs	r2, #4
 8002e74:	4909      	ldr	r1, [pc, #36]	; (8002e9c <main+0x2d8>)
 8002e76:	4638      	mov	r0, r7
 8002e78:	f7ff f9b9 	bl	80021ee <HAL_UART_Receive_IT>
 8002e7c:	e7fe      	b.n	8002e7c <main+0x2b8>
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	20000168 	.word	0x20000168
 8002e88:	200000e8 	.word	0x200000e8
 8002e8c:	10210000 	.word	0x10210000
 8002e90:	48000800 	.word	0x48000800
 8002e94:	40004400 	.word	0x40004400
 8002e98:	200000a8 	.word	0x200000a8
 8002e9c:	200001da 	.word	0x200001da
 8002ea0:	20000128 	.word	0x20000128
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40000400 	.word	0x40000400

08002eac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <HAL_MspInit+0x34>)
{
 8002eae:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	619a      	str	r2, [r3, #24]
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	f002 0201 	and.w	r2, r2, #1
 8002ebe:	9200      	str	r2, [sp, #0]
 8002ec0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	69da      	ldr	r2, [r3, #28]
 8002ec4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ec8:	61da      	str	r2, [r3, #28]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ed2:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ed4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ed6:	f7fd fe49 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eda:	b003      	add	sp, #12
 8002edc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ee0:	40021000 	.word	0x40021000

08002ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM1)
 8002ee6:	6803      	ldr	r3, [r0, #0]
 8002ee8:	4a1a      	ldr	r2, [pc, #104]	; (8002f54 <HAL_TIM_Base_MspInit+0x70>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d10c      	bne.n	8002f08 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <HAL_TIM_Base_MspInit+0x74>)
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ef6:	619a      	str	r2, [r3, #24]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f02:	b005      	add	sp, #20
 8002f04:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM2)
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0c:	d113      	bne.n	8002f36 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f0e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f12:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	61da      	str	r2, [r3, #28]
 8002f1c:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f1e:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f26:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f28:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f2a:	f7fd fe31 	bl	8000b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f2e:	201c      	movs	r0, #28
 8002f30:	f7fd fe62 	bl	8000bf8 <HAL_NVIC_EnableIRQ>
 8002f34:	e7e5      	b.n	8002f02 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM3)
 8002f36:	4a09      	ldr	r2, [pc, #36]	; (8002f5c <HAL_TIM_Base_MspInit+0x78>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d1e2      	bne.n	8002f02 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_TIM_Base_MspInit+0x74>)
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	f042 0202 	orr.w	r2, r2, #2
 8002f44:	61da      	str	r2, [r3, #28]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	9303      	str	r3, [sp, #12]
 8002f4e:	9b03      	ldr	r3, [sp, #12]
}
 8002f50:	e7d7      	b.n	8002f02 <HAL_TIM_Base_MspInit+0x1e>
 8002f52:	bf00      	nop
 8002f54:	40012c00 	.word	0x40012c00
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40000400 	.word	0x40000400

08002f60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f60:	b510      	push	{r4, lr}
 8002f62:	4604      	mov	r4, r0
 8002f64:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f66:	2214      	movs	r2, #20
 8002f68:	2100      	movs	r1, #0
 8002f6a:	a803      	add	r0, sp, #12
 8002f6c:	f000 f928 	bl	80031c0 <memset>
  if(htim->Instance==TIM1)
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	4a17      	ldr	r2, [pc, #92]	; (8002fd0 <HAL_TIM_MspPostInit+0x70>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d114      	bne.n	8002fa2 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f78:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <HAL_TIM_MspPostInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f7a:	4817      	ldr	r0, [pc, #92]	; (8002fd8 <HAL_TIM_MspPostInit+0x78>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002f82:	615a      	str	r2, [r3, #20]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8002f8e:	230b      	movs	r3, #11
 8002f90:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f92:	2302      	movs	r3, #2
 8002f94:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002f96:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f98:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9a:	f7fd fe73 	bl	8000c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f9e:	b008      	add	sp, #32
 8002fa0:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM3)
 8002fa2:	4a0e      	ldr	r2, [pc, #56]	; (8002fdc <HAL_TIM_MspPostInit+0x7c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d1fa      	bne.n	8002f9e <HAL_TIM_MspPostInit+0x3e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_TIM_MspPostInit+0x74>)
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002fb0:	615a      	str	r2, [r3, #20]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb8:	9302      	str	r3, [sp, #8]
 8002fba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002fbc:	2350      	movs	r3, #80	; 0x50
 8002fbe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fc4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc6:	a903      	add	r1, sp, #12
 8002fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fcc:	e7e5      	b.n	8002f9a <HAL_TIM_MspPostInit+0x3a>
 8002fce:	bf00      	nop
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	48000800 	.word	0x48000800
 8002fdc:	40000400 	.word	0x40000400

08002fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fe0:	b510      	push	{r4, lr}
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe6:	2214      	movs	r2, #20
 8002fe8:	2100      	movs	r1, #0
 8002fea:	a803      	add	r0, sp, #12
 8002fec:	f000 f8e8 	bl	80031c0 <memset>
  if(huart->Instance==USART2)
 8002ff0:	6822      	ldr	r2, [r4, #0]
 8002ff2:	4b16      	ldr	r3, [pc, #88]	; (800304c <HAL_UART_MspInit+0x6c>)
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d126      	bne.n	8003046 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ff8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffc:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003004:	61da      	str	r2, [r3, #28]
 8003006:	69da      	ldr	r2, [r3, #28]
 8003008:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800300c:	9201      	str	r2, [sp, #4]
 800300e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003016:	615a      	str	r2, [r3, #20]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	9302      	str	r3, [sp, #8]
 8003020:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003022:	230c      	movs	r3, #12
 8003024:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003026:	2302      	movs	r3, #2
 8003028:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800302e:	2307      	movs	r3, #7
 8003030:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003032:	f7fd fe27 	bl	8000c84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2026      	movs	r0, #38	; 0x26
 800303a:	4611      	mov	r1, r2
 800303c:	f7fd fda8 	bl	8000b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003040:	2026      	movs	r0, #38	; 0x26
 8003042:	f7fd fdd9 	bl	8000bf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003046:	b008      	add	sp, #32
 8003048:	bd10      	pop	{r4, pc}
 800304a:	bf00      	nop
 800304c:	40004400 	.word	0x40004400

08003050 <NMI_Handler>:
 8003050:	4770      	bx	lr

08003052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003052:	e7fe      	b.n	8003052 <HardFault_Handler>

08003054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003054:	e7fe      	b.n	8003054 <MemManage_Handler>

08003056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003056:	e7fe      	b.n	8003056 <BusFault_Handler>

08003058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003058:	e7fe      	b.n	8003058 <UsageFault_Handler>

0800305a <SVC_Handler>:
 800305a:	4770      	bx	lr

0800305c <DebugMon_Handler>:
 800305c:	4770      	bx	lr

0800305e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800305e:	4770      	bx	lr

08003060 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003060:	f7fd bd5e 	b.w	8000b20 <HAL_IncTick>

08003064 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003064:	4801      	ldr	r0, [pc, #4]	; (800306c <TIM2_IRQHandler+0x8>)
 8003066:	f7fe bbbf 	b.w	80017e8 <HAL_TIM_IRQHandler>
 800306a:	bf00      	nop
 800306c:	20000128 	.word	0x20000128

08003070 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003070:	4801      	ldr	r0, [pc, #4]	; (8003078 <USART2_IRQHandler+0x8>)
 8003072:	f7ff bb6f 	b.w	8002754 <HAL_UART_IRQHandler>
 8003076:	bf00      	nop
 8003078:	20000168 	.word	0x20000168

0800307c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800307c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <_sbrk+0x2c>)
 8003080:	6819      	ldr	r1, [r3, #0]
{
 8003082:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003084:	b909      	cbnz	r1, 800308a <_sbrk+0xe>
		heap_end = &end;
 8003086:	4909      	ldr	r1, [pc, #36]	; (80030ac <_sbrk+0x30>)
 8003088:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800308a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800308c:	4669      	mov	r1, sp
 800308e:	4402      	add	r2, r0
 8003090:	428a      	cmp	r2, r1
 8003092:	d906      	bls.n	80030a2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003094:	f000 f86a 	bl	800316c <__errno>
 8003098:	230c      	movs	r3, #12
 800309a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800309c:	f04f 30ff 	mov.w	r0, #4294967295
 80030a0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80030a2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80030a4:	bd08      	pop	{r3, pc}
 80030a6:	bf00      	nop
 80030a8:	20000094 	.word	0x20000094
 80030ac:	200001e4 	.word	0x200001e4

080030b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030b0:	4915      	ldr	r1, [pc, #84]	; (8003108 <SystemInit+0x58>)
 80030b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80030b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80030be:	4b13      	ldr	r3, [pc, #76]	; (800310c <SystemInit+0x5c>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80030c8:	6858      	ldr	r0, [r3, #4]
 80030ca:	4a11      	ldr	r2, [pc, #68]	; (8003110 <SystemInit+0x60>)
 80030cc:	4002      	ands	r2, r0
 80030ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80030d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030da:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030e2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80030ea:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80030ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ee:	f022 020f 	bic.w	r2, r2, #15
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80030f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030f6:	4a07      	ldr	r2, [pc, #28]	; (8003114 <SystemInit+0x64>)
 80030f8:	4002      	ands	r2, r0
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80030fc:	2200      	movs	r2, #0
 80030fe:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003100:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003104:	608b      	str	r3, [r1, #8]
 8003106:	4770      	bx	lr
 8003108:	e000ed00 	.word	0xe000ed00
 800310c:	40021000 	.word	0x40021000
 8003110:	f87fc00c 	.word	0xf87fc00c
 8003114:	ff00fccc 	.word	0xff00fccc

08003118 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003150 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800311c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800311e:	e003      	b.n	8003128 <LoopCopyDataInit>

08003120 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003122:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003124:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003126:	3104      	adds	r1, #4

08003128 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003128:	480b      	ldr	r0, [pc, #44]	; (8003158 <LoopForever+0xa>)
	ldr	r3, =_edata
 800312a:	4b0c      	ldr	r3, [pc, #48]	; (800315c <LoopForever+0xe>)
	adds	r2, r0, r1
 800312c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800312e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003130:	d3f6      	bcc.n	8003120 <CopyDataInit>
	ldr	r2, =_sbss
 8003132:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003134:	e002      	b.n	800313c <LoopFillZerobss>

08003136 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003136:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003138:	f842 3b04 	str.w	r3, [r2], #4

0800313c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <LoopForever+0x16>)
	cmp	r2, r3
 800313e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003140:	d3f9      	bcc.n	8003136 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003142:	f7ff ffb5 	bl	80030b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003146:	f000 f817 	bl	8003178 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800314a:	f7ff fd3b 	bl	8002bc4 <main>

0800314e <LoopForever>:

LoopForever:
    b LoopForever
 800314e:	e7fe      	b.n	800314e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003150:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003154:	08003c6c 	.word	0x08003c6c
	ldr	r0, =_sdata
 8003158:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800315c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003160:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003164:	200001e4 	.word	0x200001e4

08003168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003168:	e7fe      	b.n	8003168 <ADC1_2_IRQHandler>
	...

0800316c <__errno>:
 800316c:	4b01      	ldr	r3, [pc, #4]	; (8003174 <__errno+0x8>)
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	2000000c 	.word	0x2000000c

08003178 <__libc_init_array>:
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	4e0d      	ldr	r6, [pc, #52]	; (80031b0 <__libc_init_array+0x38>)
 800317c:	4c0d      	ldr	r4, [pc, #52]	; (80031b4 <__libc_init_array+0x3c>)
 800317e:	1ba4      	subs	r4, r4, r6
 8003180:	10a4      	asrs	r4, r4, #2
 8003182:	2500      	movs	r5, #0
 8003184:	42a5      	cmp	r5, r4
 8003186:	d109      	bne.n	800319c <__libc_init_array+0x24>
 8003188:	4e0b      	ldr	r6, [pc, #44]	; (80031b8 <__libc_init_array+0x40>)
 800318a:	4c0c      	ldr	r4, [pc, #48]	; (80031bc <__libc_init_array+0x44>)
 800318c:	f000 fcdc 	bl	8003b48 <_init>
 8003190:	1ba4      	subs	r4, r4, r6
 8003192:	10a4      	asrs	r4, r4, #2
 8003194:	2500      	movs	r5, #0
 8003196:	42a5      	cmp	r5, r4
 8003198:	d105      	bne.n	80031a6 <__libc_init_array+0x2e>
 800319a:	bd70      	pop	{r4, r5, r6, pc}
 800319c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031a0:	4798      	blx	r3
 80031a2:	3501      	adds	r5, #1
 80031a4:	e7ee      	b.n	8003184 <__libc_init_array+0xc>
 80031a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031aa:	4798      	blx	r3
 80031ac:	3501      	adds	r5, #1
 80031ae:	e7f2      	b.n	8003196 <__libc_init_array+0x1e>
 80031b0:	08003c64 	.word	0x08003c64
 80031b4:	08003c64 	.word	0x08003c64
 80031b8:	08003c64 	.word	0x08003c64
 80031bc:	08003c68 	.word	0x08003c68

080031c0 <memset>:
 80031c0:	4402      	add	r2, r0
 80031c2:	4603      	mov	r3, r0
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d100      	bne.n	80031ca <memset+0xa>
 80031c8:	4770      	bx	lr
 80031ca:	f803 1b01 	strb.w	r1, [r3], #1
 80031ce:	e7f9      	b.n	80031c4 <memset+0x4>

080031d0 <srand>:
 80031d0:	b538      	push	{r3, r4, r5, lr}
 80031d2:	4b12      	ldr	r3, [pc, #72]	; (800321c <srand+0x4c>)
 80031d4:	681c      	ldr	r4, [r3, #0]
 80031d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031d8:	4605      	mov	r5, r0
 80031da:	b9d3      	cbnz	r3, 8003212 <srand+0x42>
 80031dc:	2018      	movs	r0, #24
 80031de:	f000 f8ab 	bl	8003338 <malloc>
 80031e2:	f243 330e 	movw	r3, #13070	; 0x330e
 80031e6:	63a0      	str	r0, [r4, #56]	; 0x38
 80031e8:	8003      	strh	r3, [r0, #0]
 80031ea:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80031ee:	8043      	strh	r3, [r0, #2]
 80031f0:	f241 2334 	movw	r3, #4660	; 0x1234
 80031f4:	8083      	strh	r3, [r0, #4]
 80031f6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80031fa:	80c3      	strh	r3, [r0, #6]
 80031fc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8003200:	8103      	strh	r3, [r0, #8]
 8003202:	2305      	movs	r3, #5
 8003204:	8143      	strh	r3, [r0, #10]
 8003206:	230b      	movs	r3, #11
 8003208:	8183      	strh	r3, [r0, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	2300      	movs	r3, #0
 800320e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003212:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003214:	2200      	movs	r2, #0
 8003216:	611d      	str	r5, [r3, #16]
 8003218:	615a      	str	r2, [r3, #20]
 800321a:	bd38      	pop	{r3, r4, r5, pc}
 800321c:	2000000c 	.word	0x2000000c

08003220 <rand>:
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <rand+0x68>)
 8003222:	b510      	push	{r4, lr}
 8003224:	681c      	ldr	r4, [r3, #0]
 8003226:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003228:	b9d3      	cbnz	r3, 8003260 <rand+0x40>
 800322a:	2018      	movs	r0, #24
 800322c:	f000 f884 	bl	8003338 <malloc>
 8003230:	f243 330e 	movw	r3, #13070	; 0x330e
 8003234:	63a0      	str	r0, [r4, #56]	; 0x38
 8003236:	8003      	strh	r3, [r0, #0]
 8003238:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800323c:	8043      	strh	r3, [r0, #2]
 800323e:	f241 2334 	movw	r3, #4660	; 0x1234
 8003242:	8083      	strh	r3, [r0, #4]
 8003244:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8003248:	80c3      	strh	r3, [r0, #6]
 800324a:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800324e:	8103      	strh	r3, [r0, #8]
 8003250:	2305      	movs	r3, #5
 8003252:	8143      	strh	r3, [r0, #10]
 8003254:	230b      	movs	r3, #11
 8003256:	8183      	strh	r3, [r0, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	2300      	movs	r3, #0
 800325c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003260:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003262:	480a      	ldr	r0, [pc, #40]	; (800328c <rand+0x6c>)
 8003264:	690a      	ldr	r2, [r1, #16]
 8003266:	694b      	ldr	r3, [r1, #20]
 8003268:	4c09      	ldr	r4, [pc, #36]	; (8003290 <rand+0x70>)
 800326a:	4350      	muls	r0, r2
 800326c:	fb04 0003 	mla	r0, r4, r3, r0
 8003270:	fba2 2304 	umull	r2, r3, r2, r4
 8003274:	3201      	adds	r2, #1
 8003276:	4403      	add	r3, r0
 8003278:	f143 0300 	adc.w	r3, r3, #0
 800327c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003280:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8003284:	bd10      	pop	{r4, pc}
 8003286:	bf00      	nop
 8003288:	2000000c 	.word	0x2000000c
 800328c:	5851f42d 	.word	0x5851f42d
 8003290:	4c957f2d 	.word	0x4c957f2d

08003294 <siprintf>:
 8003294:	b40e      	push	{r1, r2, r3}
 8003296:	b500      	push	{lr}
 8003298:	b09c      	sub	sp, #112	; 0x70
 800329a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800329e:	ab1d      	add	r3, sp, #116	; 0x74
 80032a0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80032a4:	9002      	str	r0, [sp, #8]
 80032a6:	9006      	str	r0, [sp, #24]
 80032a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032ac:	480a      	ldr	r0, [pc, #40]	; (80032d8 <siprintf+0x44>)
 80032ae:	9104      	str	r1, [sp, #16]
 80032b0:	9107      	str	r1, [sp, #28]
 80032b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80032b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80032ba:	f8ad 1016 	strh.w	r1, [sp, #22]
 80032be:	6800      	ldr	r0, [r0, #0]
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	a902      	add	r1, sp, #8
 80032c4:	f000 f948 	bl	8003558 <_svfiprintf_r>
 80032c8:	9b02      	ldr	r3, [sp, #8]
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	b01c      	add	sp, #112	; 0x70
 80032d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80032d4:	b003      	add	sp, #12
 80032d6:	4770      	bx	lr
 80032d8:	2000000c 	.word	0x2000000c

080032dc <strcpy>:
 80032dc:	4603      	mov	r3, r0
 80032de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032e2:	f803 2b01 	strb.w	r2, [r3], #1
 80032e6:	2a00      	cmp	r2, #0
 80032e8:	d1f9      	bne.n	80032de <strcpy+0x2>
 80032ea:	4770      	bx	lr

080032ec <time>:
 80032ec:	b513      	push	{r0, r1, r4, lr}
 80032ee:	4b08      	ldr	r3, [pc, #32]	; (8003310 <time+0x24>)
 80032f0:	4604      	mov	r4, r0
 80032f2:	2200      	movs	r2, #0
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	4669      	mov	r1, sp
 80032f8:	f000 f80c 	bl	8003314 <_gettimeofday_r>
 80032fc:	2800      	cmp	r0, #0
 80032fe:	bfbc      	itt	lt
 8003300:	f04f 33ff 	movlt.w	r3, #4294967295
 8003304:	9300      	strlt	r3, [sp, #0]
 8003306:	9800      	ldr	r0, [sp, #0]
 8003308:	b104      	cbz	r4, 800330c <time+0x20>
 800330a:	6020      	str	r0, [r4, #0]
 800330c:	b002      	add	sp, #8
 800330e:	bd10      	pop	{r4, pc}
 8003310:	2000000c 	.word	0x2000000c

08003314 <_gettimeofday_r>:
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	4c07      	ldr	r4, [pc, #28]	; (8003334 <_gettimeofday_r+0x20>)
 8003318:	2300      	movs	r3, #0
 800331a:	4605      	mov	r5, r0
 800331c:	4608      	mov	r0, r1
 800331e:	4611      	mov	r1, r2
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	f000 fc09 	bl	8003b38 <_gettimeofday>
 8003326:	1c43      	adds	r3, r0, #1
 8003328:	d102      	bne.n	8003330 <_gettimeofday_r+0x1c>
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	b103      	cbz	r3, 8003330 <_gettimeofday_r+0x1c>
 800332e:	602b      	str	r3, [r5, #0]
 8003330:	bd38      	pop	{r3, r4, r5, pc}
 8003332:	bf00      	nop
 8003334:	200001e0 	.word	0x200001e0

08003338 <malloc>:
 8003338:	4b02      	ldr	r3, [pc, #8]	; (8003344 <malloc+0xc>)
 800333a:	4601      	mov	r1, r0
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	f000 b851 	b.w	80033e4 <_malloc_r>
 8003342:	bf00      	nop
 8003344:	2000000c 	.word	0x2000000c

08003348 <_free_r>:
 8003348:	b538      	push	{r3, r4, r5, lr}
 800334a:	4605      	mov	r5, r0
 800334c:	2900      	cmp	r1, #0
 800334e:	d045      	beq.n	80033dc <_free_r+0x94>
 8003350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003354:	1f0c      	subs	r4, r1, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	bfb8      	it	lt
 800335a:	18e4      	addlt	r4, r4, r3
 800335c:	f000 fbbb 	bl	8003ad6 <__malloc_lock>
 8003360:	4a1f      	ldr	r2, [pc, #124]	; (80033e0 <_free_r+0x98>)
 8003362:	6813      	ldr	r3, [r2, #0]
 8003364:	4610      	mov	r0, r2
 8003366:	b933      	cbnz	r3, 8003376 <_free_r+0x2e>
 8003368:	6063      	str	r3, [r4, #4]
 800336a:	6014      	str	r4, [r2, #0]
 800336c:	4628      	mov	r0, r5
 800336e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003372:	f000 bbb1 	b.w	8003ad8 <__malloc_unlock>
 8003376:	42a3      	cmp	r3, r4
 8003378:	d90c      	bls.n	8003394 <_free_r+0x4c>
 800337a:	6821      	ldr	r1, [r4, #0]
 800337c:	1862      	adds	r2, r4, r1
 800337e:	4293      	cmp	r3, r2
 8003380:	bf04      	itt	eq
 8003382:	681a      	ldreq	r2, [r3, #0]
 8003384:	685b      	ldreq	r3, [r3, #4]
 8003386:	6063      	str	r3, [r4, #4]
 8003388:	bf04      	itt	eq
 800338a:	1852      	addeq	r2, r2, r1
 800338c:	6022      	streq	r2, [r4, #0]
 800338e:	6004      	str	r4, [r0, #0]
 8003390:	e7ec      	b.n	800336c <_free_r+0x24>
 8003392:	4613      	mov	r3, r2
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	b10a      	cbz	r2, 800339c <_free_r+0x54>
 8003398:	42a2      	cmp	r2, r4
 800339a:	d9fa      	bls.n	8003392 <_free_r+0x4a>
 800339c:	6819      	ldr	r1, [r3, #0]
 800339e:	1858      	adds	r0, r3, r1
 80033a0:	42a0      	cmp	r0, r4
 80033a2:	d10b      	bne.n	80033bc <_free_r+0x74>
 80033a4:	6820      	ldr	r0, [r4, #0]
 80033a6:	4401      	add	r1, r0
 80033a8:	1858      	adds	r0, r3, r1
 80033aa:	4282      	cmp	r2, r0
 80033ac:	6019      	str	r1, [r3, #0]
 80033ae:	d1dd      	bne.n	800336c <_free_r+0x24>
 80033b0:	6810      	ldr	r0, [r2, #0]
 80033b2:	6852      	ldr	r2, [r2, #4]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	4401      	add	r1, r0
 80033b8:	6019      	str	r1, [r3, #0]
 80033ba:	e7d7      	b.n	800336c <_free_r+0x24>
 80033bc:	d902      	bls.n	80033c4 <_free_r+0x7c>
 80033be:	230c      	movs	r3, #12
 80033c0:	602b      	str	r3, [r5, #0]
 80033c2:	e7d3      	b.n	800336c <_free_r+0x24>
 80033c4:	6820      	ldr	r0, [r4, #0]
 80033c6:	1821      	adds	r1, r4, r0
 80033c8:	428a      	cmp	r2, r1
 80033ca:	bf04      	itt	eq
 80033cc:	6811      	ldreq	r1, [r2, #0]
 80033ce:	6852      	ldreq	r2, [r2, #4]
 80033d0:	6062      	str	r2, [r4, #4]
 80033d2:	bf04      	itt	eq
 80033d4:	1809      	addeq	r1, r1, r0
 80033d6:	6021      	streq	r1, [r4, #0]
 80033d8:	605c      	str	r4, [r3, #4]
 80033da:	e7c7      	b.n	800336c <_free_r+0x24>
 80033dc:	bd38      	pop	{r3, r4, r5, pc}
 80033de:	bf00      	nop
 80033e0:	20000098 	.word	0x20000098

080033e4 <_malloc_r>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	1ccd      	adds	r5, r1, #3
 80033e8:	f025 0503 	bic.w	r5, r5, #3
 80033ec:	3508      	adds	r5, #8
 80033ee:	2d0c      	cmp	r5, #12
 80033f0:	bf38      	it	cc
 80033f2:	250c      	movcc	r5, #12
 80033f4:	2d00      	cmp	r5, #0
 80033f6:	4606      	mov	r6, r0
 80033f8:	db01      	blt.n	80033fe <_malloc_r+0x1a>
 80033fa:	42a9      	cmp	r1, r5
 80033fc:	d903      	bls.n	8003406 <_malloc_r+0x22>
 80033fe:	230c      	movs	r3, #12
 8003400:	6033      	str	r3, [r6, #0]
 8003402:	2000      	movs	r0, #0
 8003404:	bd70      	pop	{r4, r5, r6, pc}
 8003406:	f000 fb66 	bl	8003ad6 <__malloc_lock>
 800340a:	4a23      	ldr	r2, [pc, #140]	; (8003498 <_malloc_r+0xb4>)
 800340c:	6814      	ldr	r4, [r2, #0]
 800340e:	4621      	mov	r1, r4
 8003410:	b991      	cbnz	r1, 8003438 <_malloc_r+0x54>
 8003412:	4c22      	ldr	r4, [pc, #136]	; (800349c <_malloc_r+0xb8>)
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	b91b      	cbnz	r3, 8003420 <_malloc_r+0x3c>
 8003418:	4630      	mov	r0, r6
 800341a:	f000 fb27 	bl	8003a6c <_sbrk_r>
 800341e:	6020      	str	r0, [r4, #0]
 8003420:	4629      	mov	r1, r5
 8003422:	4630      	mov	r0, r6
 8003424:	f000 fb22 	bl	8003a6c <_sbrk_r>
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	d126      	bne.n	800347a <_malloc_r+0x96>
 800342c:	230c      	movs	r3, #12
 800342e:	6033      	str	r3, [r6, #0]
 8003430:	4630      	mov	r0, r6
 8003432:	f000 fb51 	bl	8003ad8 <__malloc_unlock>
 8003436:	e7e4      	b.n	8003402 <_malloc_r+0x1e>
 8003438:	680b      	ldr	r3, [r1, #0]
 800343a:	1b5b      	subs	r3, r3, r5
 800343c:	d41a      	bmi.n	8003474 <_malloc_r+0x90>
 800343e:	2b0b      	cmp	r3, #11
 8003440:	d90f      	bls.n	8003462 <_malloc_r+0x7e>
 8003442:	600b      	str	r3, [r1, #0]
 8003444:	50cd      	str	r5, [r1, r3]
 8003446:	18cc      	adds	r4, r1, r3
 8003448:	4630      	mov	r0, r6
 800344a:	f000 fb45 	bl	8003ad8 <__malloc_unlock>
 800344e:	f104 000b 	add.w	r0, r4, #11
 8003452:	1d23      	adds	r3, r4, #4
 8003454:	f020 0007 	bic.w	r0, r0, #7
 8003458:	1ac3      	subs	r3, r0, r3
 800345a:	d01b      	beq.n	8003494 <_malloc_r+0xb0>
 800345c:	425a      	negs	r2, r3
 800345e:	50e2      	str	r2, [r4, r3]
 8003460:	bd70      	pop	{r4, r5, r6, pc}
 8003462:	428c      	cmp	r4, r1
 8003464:	bf0d      	iteet	eq
 8003466:	6863      	ldreq	r3, [r4, #4]
 8003468:	684b      	ldrne	r3, [r1, #4]
 800346a:	6063      	strne	r3, [r4, #4]
 800346c:	6013      	streq	r3, [r2, #0]
 800346e:	bf18      	it	ne
 8003470:	460c      	movne	r4, r1
 8003472:	e7e9      	b.n	8003448 <_malloc_r+0x64>
 8003474:	460c      	mov	r4, r1
 8003476:	6849      	ldr	r1, [r1, #4]
 8003478:	e7ca      	b.n	8003410 <_malloc_r+0x2c>
 800347a:	1cc4      	adds	r4, r0, #3
 800347c:	f024 0403 	bic.w	r4, r4, #3
 8003480:	42a0      	cmp	r0, r4
 8003482:	d005      	beq.n	8003490 <_malloc_r+0xac>
 8003484:	1a21      	subs	r1, r4, r0
 8003486:	4630      	mov	r0, r6
 8003488:	f000 faf0 	bl	8003a6c <_sbrk_r>
 800348c:	3001      	adds	r0, #1
 800348e:	d0cd      	beq.n	800342c <_malloc_r+0x48>
 8003490:	6025      	str	r5, [r4, #0]
 8003492:	e7d9      	b.n	8003448 <_malloc_r+0x64>
 8003494:	bd70      	pop	{r4, r5, r6, pc}
 8003496:	bf00      	nop
 8003498:	20000098 	.word	0x20000098
 800349c:	2000009c 	.word	0x2000009c

080034a0 <__ssputs_r>:
 80034a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034a4:	688e      	ldr	r6, [r1, #8]
 80034a6:	429e      	cmp	r6, r3
 80034a8:	4682      	mov	sl, r0
 80034aa:	460c      	mov	r4, r1
 80034ac:	4691      	mov	r9, r2
 80034ae:	4698      	mov	r8, r3
 80034b0:	d835      	bhi.n	800351e <__ssputs_r+0x7e>
 80034b2:	898a      	ldrh	r2, [r1, #12]
 80034b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034b8:	d031      	beq.n	800351e <__ssputs_r+0x7e>
 80034ba:	6825      	ldr	r5, [r4, #0]
 80034bc:	6909      	ldr	r1, [r1, #16]
 80034be:	1a6f      	subs	r7, r5, r1
 80034c0:	6965      	ldr	r5, [r4, #20]
 80034c2:	2302      	movs	r3, #2
 80034c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80034cc:	f108 0301 	add.w	r3, r8, #1
 80034d0:	443b      	add	r3, r7
 80034d2:	429d      	cmp	r5, r3
 80034d4:	bf38      	it	cc
 80034d6:	461d      	movcc	r5, r3
 80034d8:	0553      	lsls	r3, r2, #21
 80034da:	d531      	bpl.n	8003540 <__ssputs_r+0xa0>
 80034dc:	4629      	mov	r1, r5
 80034de:	f7ff ff81 	bl	80033e4 <_malloc_r>
 80034e2:	4606      	mov	r6, r0
 80034e4:	b950      	cbnz	r0, 80034fc <__ssputs_r+0x5c>
 80034e6:	230c      	movs	r3, #12
 80034e8:	f8ca 3000 	str.w	r3, [sl]
 80034ec:	89a3      	ldrh	r3, [r4, #12]
 80034ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034f2:	81a3      	strh	r3, [r4, #12]
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295
 80034f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034fc:	463a      	mov	r2, r7
 80034fe:	6921      	ldr	r1, [r4, #16]
 8003500:	f000 fac4 	bl	8003a8c <memcpy>
 8003504:	89a3      	ldrh	r3, [r4, #12]
 8003506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800350a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350e:	81a3      	strh	r3, [r4, #12]
 8003510:	6126      	str	r6, [r4, #16]
 8003512:	6165      	str	r5, [r4, #20]
 8003514:	443e      	add	r6, r7
 8003516:	1bed      	subs	r5, r5, r7
 8003518:	6026      	str	r6, [r4, #0]
 800351a:	60a5      	str	r5, [r4, #8]
 800351c:	4646      	mov	r6, r8
 800351e:	4546      	cmp	r6, r8
 8003520:	bf28      	it	cs
 8003522:	4646      	movcs	r6, r8
 8003524:	4632      	mov	r2, r6
 8003526:	4649      	mov	r1, r9
 8003528:	6820      	ldr	r0, [r4, #0]
 800352a:	f000 faba 	bl	8003aa2 <memmove>
 800352e:	68a3      	ldr	r3, [r4, #8]
 8003530:	1b9b      	subs	r3, r3, r6
 8003532:	60a3      	str	r3, [r4, #8]
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	441e      	add	r6, r3
 8003538:	6026      	str	r6, [r4, #0]
 800353a:	2000      	movs	r0, #0
 800353c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003540:	462a      	mov	r2, r5
 8003542:	f000 faca 	bl	8003ada <_realloc_r>
 8003546:	4606      	mov	r6, r0
 8003548:	2800      	cmp	r0, #0
 800354a:	d1e1      	bne.n	8003510 <__ssputs_r+0x70>
 800354c:	6921      	ldr	r1, [r4, #16]
 800354e:	4650      	mov	r0, sl
 8003550:	f7ff fefa 	bl	8003348 <_free_r>
 8003554:	e7c7      	b.n	80034e6 <__ssputs_r+0x46>
	...

08003558 <_svfiprintf_r>:
 8003558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800355c:	b09d      	sub	sp, #116	; 0x74
 800355e:	4680      	mov	r8, r0
 8003560:	9303      	str	r3, [sp, #12]
 8003562:	898b      	ldrh	r3, [r1, #12]
 8003564:	061c      	lsls	r4, r3, #24
 8003566:	460d      	mov	r5, r1
 8003568:	4616      	mov	r6, r2
 800356a:	d50f      	bpl.n	800358c <_svfiprintf_r+0x34>
 800356c:	690b      	ldr	r3, [r1, #16]
 800356e:	b96b      	cbnz	r3, 800358c <_svfiprintf_r+0x34>
 8003570:	2140      	movs	r1, #64	; 0x40
 8003572:	f7ff ff37 	bl	80033e4 <_malloc_r>
 8003576:	6028      	str	r0, [r5, #0]
 8003578:	6128      	str	r0, [r5, #16]
 800357a:	b928      	cbnz	r0, 8003588 <_svfiprintf_r+0x30>
 800357c:	230c      	movs	r3, #12
 800357e:	f8c8 3000 	str.w	r3, [r8]
 8003582:	f04f 30ff 	mov.w	r0, #4294967295
 8003586:	e0c5      	b.n	8003714 <_svfiprintf_r+0x1bc>
 8003588:	2340      	movs	r3, #64	; 0x40
 800358a:	616b      	str	r3, [r5, #20]
 800358c:	2300      	movs	r3, #0
 800358e:	9309      	str	r3, [sp, #36]	; 0x24
 8003590:	2320      	movs	r3, #32
 8003592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003596:	2330      	movs	r3, #48	; 0x30
 8003598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800359c:	f04f 0b01 	mov.w	fp, #1
 80035a0:	4637      	mov	r7, r6
 80035a2:	463c      	mov	r4, r7
 80035a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d13c      	bne.n	8003626 <_svfiprintf_r+0xce>
 80035ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80035b0:	d00b      	beq.n	80035ca <_svfiprintf_r+0x72>
 80035b2:	4653      	mov	r3, sl
 80035b4:	4632      	mov	r2, r6
 80035b6:	4629      	mov	r1, r5
 80035b8:	4640      	mov	r0, r8
 80035ba:	f7ff ff71 	bl	80034a0 <__ssputs_r>
 80035be:	3001      	adds	r0, #1
 80035c0:	f000 80a3 	beq.w	800370a <_svfiprintf_r+0x1b2>
 80035c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035c6:	4453      	add	r3, sl
 80035c8:	9309      	str	r3, [sp, #36]	; 0x24
 80035ca:	783b      	ldrb	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 809c 	beq.w	800370a <_svfiprintf_r+0x1b2>
 80035d2:	2300      	movs	r3, #0
 80035d4:	f04f 32ff 	mov.w	r2, #4294967295
 80035d8:	9304      	str	r3, [sp, #16]
 80035da:	9307      	str	r3, [sp, #28]
 80035dc:	9205      	str	r2, [sp, #20]
 80035de:	9306      	str	r3, [sp, #24]
 80035e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035e4:	931a      	str	r3, [sp, #104]	; 0x68
 80035e6:	2205      	movs	r2, #5
 80035e8:	7821      	ldrb	r1, [r4, #0]
 80035ea:	4850      	ldr	r0, [pc, #320]	; (800372c <_svfiprintf_r+0x1d4>)
 80035ec:	f7fc fdf8 	bl	80001e0 <memchr>
 80035f0:	1c67      	adds	r7, r4, #1
 80035f2:	9b04      	ldr	r3, [sp, #16]
 80035f4:	b9d8      	cbnz	r0, 800362e <_svfiprintf_r+0xd6>
 80035f6:	06d9      	lsls	r1, r3, #27
 80035f8:	bf44      	itt	mi
 80035fa:	2220      	movmi	r2, #32
 80035fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003600:	071a      	lsls	r2, r3, #28
 8003602:	bf44      	itt	mi
 8003604:	222b      	movmi	r2, #43	; 0x2b
 8003606:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800360a:	7822      	ldrb	r2, [r4, #0]
 800360c:	2a2a      	cmp	r2, #42	; 0x2a
 800360e:	d016      	beq.n	800363e <_svfiprintf_r+0xe6>
 8003610:	9a07      	ldr	r2, [sp, #28]
 8003612:	2100      	movs	r1, #0
 8003614:	200a      	movs	r0, #10
 8003616:	4627      	mov	r7, r4
 8003618:	3401      	adds	r4, #1
 800361a:	783b      	ldrb	r3, [r7, #0]
 800361c:	3b30      	subs	r3, #48	; 0x30
 800361e:	2b09      	cmp	r3, #9
 8003620:	d951      	bls.n	80036c6 <_svfiprintf_r+0x16e>
 8003622:	b1c9      	cbz	r1, 8003658 <_svfiprintf_r+0x100>
 8003624:	e011      	b.n	800364a <_svfiprintf_r+0xf2>
 8003626:	2b25      	cmp	r3, #37	; 0x25
 8003628:	d0c0      	beq.n	80035ac <_svfiprintf_r+0x54>
 800362a:	4627      	mov	r7, r4
 800362c:	e7b9      	b.n	80035a2 <_svfiprintf_r+0x4a>
 800362e:	4a3f      	ldr	r2, [pc, #252]	; (800372c <_svfiprintf_r+0x1d4>)
 8003630:	1a80      	subs	r0, r0, r2
 8003632:	fa0b f000 	lsl.w	r0, fp, r0
 8003636:	4318      	orrs	r0, r3
 8003638:	9004      	str	r0, [sp, #16]
 800363a:	463c      	mov	r4, r7
 800363c:	e7d3      	b.n	80035e6 <_svfiprintf_r+0x8e>
 800363e:	9a03      	ldr	r2, [sp, #12]
 8003640:	1d11      	adds	r1, r2, #4
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	9103      	str	r1, [sp, #12]
 8003646:	2a00      	cmp	r2, #0
 8003648:	db01      	blt.n	800364e <_svfiprintf_r+0xf6>
 800364a:	9207      	str	r2, [sp, #28]
 800364c:	e004      	b.n	8003658 <_svfiprintf_r+0x100>
 800364e:	4252      	negs	r2, r2
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	9207      	str	r2, [sp, #28]
 8003656:	9304      	str	r3, [sp, #16]
 8003658:	783b      	ldrb	r3, [r7, #0]
 800365a:	2b2e      	cmp	r3, #46	; 0x2e
 800365c:	d10e      	bne.n	800367c <_svfiprintf_r+0x124>
 800365e:	787b      	ldrb	r3, [r7, #1]
 8003660:	2b2a      	cmp	r3, #42	; 0x2a
 8003662:	f107 0101 	add.w	r1, r7, #1
 8003666:	d132      	bne.n	80036ce <_svfiprintf_r+0x176>
 8003668:	9b03      	ldr	r3, [sp, #12]
 800366a:	1d1a      	adds	r2, r3, #4
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	9203      	str	r2, [sp, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	bfb8      	it	lt
 8003674:	f04f 33ff 	movlt.w	r3, #4294967295
 8003678:	3702      	adds	r7, #2
 800367a:	9305      	str	r3, [sp, #20]
 800367c:	4c2c      	ldr	r4, [pc, #176]	; (8003730 <_svfiprintf_r+0x1d8>)
 800367e:	7839      	ldrb	r1, [r7, #0]
 8003680:	2203      	movs	r2, #3
 8003682:	4620      	mov	r0, r4
 8003684:	f7fc fdac 	bl	80001e0 <memchr>
 8003688:	b138      	cbz	r0, 800369a <_svfiprintf_r+0x142>
 800368a:	2340      	movs	r3, #64	; 0x40
 800368c:	1b00      	subs	r0, r0, r4
 800368e:	fa03 f000 	lsl.w	r0, r3, r0
 8003692:	9b04      	ldr	r3, [sp, #16]
 8003694:	4303      	orrs	r3, r0
 8003696:	9304      	str	r3, [sp, #16]
 8003698:	3701      	adds	r7, #1
 800369a:	7839      	ldrb	r1, [r7, #0]
 800369c:	4825      	ldr	r0, [pc, #148]	; (8003734 <_svfiprintf_r+0x1dc>)
 800369e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036a2:	2206      	movs	r2, #6
 80036a4:	1c7e      	adds	r6, r7, #1
 80036a6:	f7fc fd9b 	bl	80001e0 <memchr>
 80036aa:	2800      	cmp	r0, #0
 80036ac:	d035      	beq.n	800371a <_svfiprintf_r+0x1c2>
 80036ae:	4b22      	ldr	r3, [pc, #136]	; (8003738 <_svfiprintf_r+0x1e0>)
 80036b0:	b9fb      	cbnz	r3, 80036f2 <_svfiprintf_r+0x19a>
 80036b2:	9b03      	ldr	r3, [sp, #12]
 80036b4:	3307      	adds	r3, #7
 80036b6:	f023 0307 	bic.w	r3, r3, #7
 80036ba:	3308      	adds	r3, #8
 80036bc:	9303      	str	r3, [sp, #12]
 80036be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036c0:	444b      	add	r3, r9
 80036c2:	9309      	str	r3, [sp, #36]	; 0x24
 80036c4:	e76c      	b.n	80035a0 <_svfiprintf_r+0x48>
 80036c6:	fb00 3202 	mla	r2, r0, r2, r3
 80036ca:	2101      	movs	r1, #1
 80036cc:	e7a3      	b.n	8003616 <_svfiprintf_r+0xbe>
 80036ce:	2300      	movs	r3, #0
 80036d0:	9305      	str	r3, [sp, #20]
 80036d2:	4618      	mov	r0, r3
 80036d4:	240a      	movs	r4, #10
 80036d6:	460f      	mov	r7, r1
 80036d8:	3101      	adds	r1, #1
 80036da:	783a      	ldrb	r2, [r7, #0]
 80036dc:	3a30      	subs	r2, #48	; 0x30
 80036de:	2a09      	cmp	r2, #9
 80036e0:	d903      	bls.n	80036ea <_svfiprintf_r+0x192>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0ca      	beq.n	800367c <_svfiprintf_r+0x124>
 80036e6:	9005      	str	r0, [sp, #20]
 80036e8:	e7c8      	b.n	800367c <_svfiprintf_r+0x124>
 80036ea:	fb04 2000 	mla	r0, r4, r0, r2
 80036ee:	2301      	movs	r3, #1
 80036f0:	e7f1      	b.n	80036d6 <_svfiprintf_r+0x17e>
 80036f2:	ab03      	add	r3, sp, #12
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	462a      	mov	r2, r5
 80036f8:	4b10      	ldr	r3, [pc, #64]	; (800373c <_svfiprintf_r+0x1e4>)
 80036fa:	a904      	add	r1, sp, #16
 80036fc:	4640      	mov	r0, r8
 80036fe:	f3af 8000 	nop.w
 8003702:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003706:	4681      	mov	r9, r0
 8003708:	d1d9      	bne.n	80036be <_svfiprintf_r+0x166>
 800370a:	89ab      	ldrh	r3, [r5, #12]
 800370c:	065b      	lsls	r3, r3, #25
 800370e:	f53f af38 	bmi.w	8003582 <_svfiprintf_r+0x2a>
 8003712:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003714:	b01d      	add	sp, #116	; 0x74
 8003716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800371a:	ab03      	add	r3, sp, #12
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	462a      	mov	r2, r5
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <_svfiprintf_r+0x1e4>)
 8003722:	a904      	add	r1, sp, #16
 8003724:	4640      	mov	r0, r8
 8003726:	f000 f881 	bl	800382c <_printf_i>
 800372a:	e7ea      	b.n	8003702 <_svfiprintf_r+0x1aa>
 800372c:	08003c2e 	.word	0x08003c2e
 8003730:	08003c34 	.word	0x08003c34
 8003734:	08003c38 	.word	0x08003c38
 8003738:	00000000 	.word	0x00000000
 800373c:	080034a1 	.word	0x080034a1

08003740 <_printf_common>:
 8003740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003744:	4691      	mov	r9, r2
 8003746:	461f      	mov	r7, r3
 8003748:	688a      	ldr	r2, [r1, #8]
 800374a:	690b      	ldr	r3, [r1, #16]
 800374c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003750:	4293      	cmp	r3, r2
 8003752:	bfb8      	it	lt
 8003754:	4613      	movlt	r3, r2
 8003756:	f8c9 3000 	str.w	r3, [r9]
 800375a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800375e:	4606      	mov	r6, r0
 8003760:	460c      	mov	r4, r1
 8003762:	b112      	cbz	r2, 800376a <_printf_common+0x2a>
 8003764:	3301      	adds	r3, #1
 8003766:	f8c9 3000 	str.w	r3, [r9]
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	0699      	lsls	r1, r3, #26
 800376e:	bf42      	ittt	mi
 8003770:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003774:	3302      	addmi	r3, #2
 8003776:	f8c9 3000 	strmi.w	r3, [r9]
 800377a:	6825      	ldr	r5, [r4, #0]
 800377c:	f015 0506 	ands.w	r5, r5, #6
 8003780:	d107      	bne.n	8003792 <_printf_common+0x52>
 8003782:	f104 0a19 	add.w	sl, r4, #25
 8003786:	68e3      	ldr	r3, [r4, #12]
 8003788:	f8d9 2000 	ldr.w	r2, [r9]
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	429d      	cmp	r5, r3
 8003790:	db29      	blt.n	80037e6 <_printf_common+0xa6>
 8003792:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003796:	6822      	ldr	r2, [r4, #0]
 8003798:	3300      	adds	r3, #0
 800379a:	bf18      	it	ne
 800379c:	2301      	movne	r3, #1
 800379e:	0692      	lsls	r2, r2, #26
 80037a0:	d42e      	bmi.n	8003800 <_printf_common+0xc0>
 80037a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037a6:	4639      	mov	r1, r7
 80037a8:	4630      	mov	r0, r6
 80037aa:	47c0      	blx	r8
 80037ac:	3001      	adds	r0, #1
 80037ae:	d021      	beq.n	80037f4 <_printf_common+0xb4>
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	68e5      	ldr	r5, [r4, #12]
 80037b4:	f8d9 2000 	ldr.w	r2, [r9]
 80037b8:	f003 0306 	and.w	r3, r3, #6
 80037bc:	2b04      	cmp	r3, #4
 80037be:	bf08      	it	eq
 80037c0:	1aad      	subeq	r5, r5, r2
 80037c2:	68a3      	ldr	r3, [r4, #8]
 80037c4:	6922      	ldr	r2, [r4, #16]
 80037c6:	bf0c      	ite	eq
 80037c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037cc:	2500      	movne	r5, #0
 80037ce:	4293      	cmp	r3, r2
 80037d0:	bfc4      	itt	gt
 80037d2:	1a9b      	subgt	r3, r3, r2
 80037d4:	18ed      	addgt	r5, r5, r3
 80037d6:	f04f 0900 	mov.w	r9, #0
 80037da:	341a      	adds	r4, #26
 80037dc:	454d      	cmp	r5, r9
 80037de:	d11b      	bne.n	8003818 <_printf_common+0xd8>
 80037e0:	2000      	movs	r0, #0
 80037e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037e6:	2301      	movs	r3, #1
 80037e8:	4652      	mov	r2, sl
 80037ea:	4639      	mov	r1, r7
 80037ec:	4630      	mov	r0, r6
 80037ee:	47c0      	blx	r8
 80037f0:	3001      	adds	r0, #1
 80037f2:	d103      	bne.n	80037fc <_printf_common+0xbc>
 80037f4:	f04f 30ff 	mov.w	r0, #4294967295
 80037f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037fc:	3501      	adds	r5, #1
 80037fe:	e7c2      	b.n	8003786 <_printf_common+0x46>
 8003800:	18e1      	adds	r1, r4, r3
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	2030      	movs	r0, #48	; 0x30
 8003806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800380a:	4422      	add	r2, r4
 800380c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003814:	3302      	adds	r3, #2
 8003816:	e7c4      	b.n	80037a2 <_printf_common+0x62>
 8003818:	2301      	movs	r3, #1
 800381a:	4622      	mov	r2, r4
 800381c:	4639      	mov	r1, r7
 800381e:	4630      	mov	r0, r6
 8003820:	47c0      	blx	r8
 8003822:	3001      	adds	r0, #1
 8003824:	d0e6      	beq.n	80037f4 <_printf_common+0xb4>
 8003826:	f109 0901 	add.w	r9, r9, #1
 800382a:	e7d7      	b.n	80037dc <_printf_common+0x9c>

0800382c <_printf_i>:
 800382c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003830:	4617      	mov	r7, r2
 8003832:	7e0a      	ldrb	r2, [r1, #24]
 8003834:	b085      	sub	sp, #20
 8003836:	2a6e      	cmp	r2, #110	; 0x6e
 8003838:	4698      	mov	r8, r3
 800383a:	4606      	mov	r6, r0
 800383c:	460c      	mov	r4, r1
 800383e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003840:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003844:	f000 80bc 	beq.w	80039c0 <_printf_i+0x194>
 8003848:	d81a      	bhi.n	8003880 <_printf_i+0x54>
 800384a:	2a63      	cmp	r2, #99	; 0x63
 800384c:	d02e      	beq.n	80038ac <_printf_i+0x80>
 800384e:	d80a      	bhi.n	8003866 <_printf_i+0x3a>
 8003850:	2a00      	cmp	r2, #0
 8003852:	f000 80c8 	beq.w	80039e6 <_printf_i+0x1ba>
 8003856:	2a58      	cmp	r2, #88	; 0x58
 8003858:	f000 808a 	beq.w	8003970 <_printf_i+0x144>
 800385c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003860:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003864:	e02a      	b.n	80038bc <_printf_i+0x90>
 8003866:	2a64      	cmp	r2, #100	; 0x64
 8003868:	d001      	beq.n	800386e <_printf_i+0x42>
 800386a:	2a69      	cmp	r2, #105	; 0x69
 800386c:	d1f6      	bne.n	800385c <_printf_i+0x30>
 800386e:	6821      	ldr	r1, [r4, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003876:	d023      	beq.n	80038c0 <_printf_i+0x94>
 8003878:	1d11      	adds	r1, r2, #4
 800387a:	6019      	str	r1, [r3, #0]
 800387c:	6813      	ldr	r3, [r2, #0]
 800387e:	e027      	b.n	80038d0 <_printf_i+0xa4>
 8003880:	2a73      	cmp	r2, #115	; 0x73
 8003882:	f000 80b4 	beq.w	80039ee <_printf_i+0x1c2>
 8003886:	d808      	bhi.n	800389a <_printf_i+0x6e>
 8003888:	2a6f      	cmp	r2, #111	; 0x6f
 800388a:	d02a      	beq.n	80038e2 <_printf_i+0xb6>
 800388c:	2a70      	cmp	r2, #112	; 0x70
 800388e:	d1e5      	bne.n	800385c <_printf_i+0x30>
 8003890:	680a      	ldr	r2, [r1, #0]
 8003892:	f042 0220 	orr.w	r2, r2, #32
 8003896:	600a      	str	r2, [r1, #0]
 8003898:	e003      	b.n	80038a2 <_printf_i+0x76>
 800389a:	2a75      	cmp	r2, #117	; 0x75
 800389c:	d021      	beq.n	80038e2 <_printf_i+0xb6>
 800389e:	2a78      	cmp	r2, #120	; 0x78
 80038a0:	d1dc      	bne.n	800385c <_printf_i+0x30>
 80038a2:	2278      	movs	r2, #120	; 0x78
 80038a4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80038a8:	496e      	ldr	r1, [pc, #440]	; (8003a64 <_printf_i+0x238>)
 80038aa:	e064      	b.n	8003976 <_printf_i+0x14a>
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80038b2:	1d11      	adds	r1, r2, #4
 80038b4:	6019      	str	r1, [r3, #0]
 80038b6:	6813      	ldr	r3, [r2, #0]
 80038b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038bc:	2301      	movs	r3, #1
 80038be:	e0a3      	b.n	8003a08 <_printf_i+0x1dc>
 80038c0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80038c4:	f102 0104 	add.w	r1, r2, #4
 80038c8:	6019      	str	r1, [r3, #0]
 80038ca:	d0d7      	beq.n	800387c <_printf_i+0x50>
 80038cc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	da03      	bge.n	80038dc <_printf_i+0xb0>
 80038d4:	222d      	movs	r2, #45	; 0x2d
 80038d6:	425b      	negs	r3, r3
 80038d8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80038dc:	4962      	ldr	r1, [pc, #392]	; (8003a68 <_printf_i+0x23c>)
 80038de:	220a      	movs	r2, #10
 80038e0:	e017      	b.n	8003912 <_printf_i+0xe6>
 80038e2:	6820      	ldr	r0, [r4, #0]
 80038e4:	6819      	ldr	r1, [r3, #0]
 80038e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80038ea:	d003      	beq.n	80038f4 <_printf_i+0xc8>
 80038ec:	1d08      	adds	r0, r1, #4
 80038ee:	6018      	str	r0, [r3, #0]
 80038f0:	680b      	ldr	r3, [r1, #0]
 80038f2:	e006      	b.n	8003902 <_printf_i+0xd6>
 80038f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038f8:	f101 0004 	add.w	r0, r1, #4
 80038fc:	6018      	str	r0, [r3, #0]
 80038fe:	d0f7      	beq.n	80038f0 <_printf_i+0xc4>
 8003900:	880b      	ldrh	r3, [r1, #0]
 8003902:	4959      	ldr	r1, [pc, #356]	; (8003a68 <_printf_i+0x23c>)
 8003904:	2a6f      	cmp	r2, #111	; 0x6f
 8003906:	bf14      	ite	ne
 8003908:	220a      	movne	r2, #10
 800390a:	2208      	moveq	r2, #8
 800390c:	2000      	movs	r0, #0
 800390e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003912:	6865      	ldr	r5, [r4, #4]
 8003914:	60a5      	str	r5, [r4, #8]
 8003916:	2d00      	cmp	r5, #0
 8003918:	f2c0 809c 	blt.w	8003a54 <_printf_i+0x228>
 800391c:	6820      	ldr	r0, [r4, #0]
 800391e:	f020 0004 	bic.w	r0, r0, #4
 8003922:	6020      	str	r0, [r4, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d13f      	bne.n	80039a8 <_printf_i+0x17c>
 8003928:	2d00      	cmp	r5, #0
 800392a:	f040 8095 	bne.w	8003a58 <_printf_i+0x22c>
 800392e:	4675      	mov	r5, lr
 8003930:	2a08      	cmp	r2, #8
 8003932:	d10b      	bne.n	800394c <_printf_i+0x120>
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	07da      	lsls	r2, r3, #31
 8003938:	d508      	bpl.n	800394c <_printf_i+0x120>
 800393a:	6923      	ldr	r3, [r4, #16]
 800393c:	6862      	ldr	r2, [r4, #4]
 800393e:	429a      	cmp	r2, r3
 8003940:	bfde      	ittt	le
 8003942:	2330      	movle	r3, #48	; 0x30
 8003944:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003948:	f105 35ff 	addle.w	r5, r5, #4294967295
 800394c:	ebae 0305 	sub.w	r3, lr, r5
 8003950:	6123      	str	r3, [r4, #16]
 8003952:	f8cd 8000 	str.w	r8, [sp]
 8003956:	463b      	mov	r3, r7
 8003958:	aa03      	add	r2, sp, #12
 800395a:	4621      	mov	r1, r4
 800395c:	4630      	mov	r0, r6
 800395e:	f7ff feef 	bl	8003740 <_printf_common>
 8003962:	3001      	adds	r0, #1
 8003964:	d155      	bne.n	8003a12 <_printf_i+0x1e6>
 8003966:	f04f 30ff 	mov.w	r0, #4294967295
 800396a:	b005      	add	sp, #20
 800396c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003970:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003974:	493c      	ldr	r1, [pc, #240]	; (8003a68 <_printf_i+0x23c>)
 8003976:	6822      	ldr	r2, [r4, #0]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800397e:	f100 0504 	add.w	r5, r0, #4
 8003982:	601d      	str	r5, [r3, #0]
 8003984:	d001      	beq.n	800398a <_printf_i+0x15e>
 8003986:	6803      	ldr	r3, [r0, #0]
 8003988:	e002      	b.n	8003990 <_printf_i+0x164>
 800398a:	0655      	lsls	r5, r2, #25
 800398c:	d5fb      	bpl.n	8003986 <_printf_i+0x15a>
 800398e:	8803      	ldrh	r3, [r0, #0]
 8003990:	07d0      	lsls	r0, r2, #31
 8003992:	bf44      	itt	mi
 8003994:	f042 0220 	orrmi.w	r2, r2, #32
 8003998:	6022      	strmi	r2, [r4, #0]
 800399a:	b91b      	cbnz	r3, 80039a4 <_printf_i+0x178>
 800399c:	6822      	ldr	r2, [r4, #0]
 800399e:	f022 0220 	bic.w	r2, r2, #32
 80039a2:	6022      	str	r2, [r4, #0]
 80039a4:	2210      	movs	r2, #16
 80039a6:	e7b1      	b.n	800390c <_printf_i+0xe0>
 80039a8:	4675      	mov	r5, lr
 80039aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80039ae:	fb02 3310 	mls	r3, r2, r0, r3
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80039b8:	4603      	mov	r3, r0
 80039ba:	2800      	cmp	r0, #0
 80039bc:	d1f5      	bne.n	80039aa <_printf_i+0x17e>
 80039be:	e7b7      	b.n	8003930 <_printf_i+0x104>
 80039c0:	6808      	ldr	r0, [r1, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	6949      	ldr	r1, [r1, #20]
 80039c6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80039ca:	d004      	beq.n	80039d6 <_printf_i+0x1aa>
 80039cc:	1d10      	adds	r0, r2, #4
 80039ce:	6018      	str	r0, [r3, #0]
 80039d0:	6813      	ldr	r3, [r2, #0]
 80039d2:	6019      	str	r1, [r3, #0]
 80039d4:	e007      	b.n	80039e6 <_printf_i+0x1ba>
 80039d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039da:	f102 0004 	add.w	r0, r2, #4
 80039de:	6018      	str	r0, [r3, #0]
 80039e0:	6813      	ldr	r3, [r2, #0]
 80039e2:	d0f6      	beq.n	80039d2 <_printf_i+0x1a6>
 80039e4:	8019      	strh	r1, [r3, #0]
 80039e6:	2300      	movs	r3, #0
 80039e8:	6123      	str	r3, [r4, #16]
 80039ea:	4675      	mov	r5, lr
 80039ec:	e7b1      	b.n	8003952 <_printf_i+0x126>
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	1d11      	adds	r1, r2, #4
 80039f2:	6019      	str	r1, [r3, #0]
 80039f4:	6815      	ldr	r5, [r2, #0]
 80039f6:	6862      	ldr	r2, [r4, #4]
 80039f8:	2100      	movs	r1, #0
 80039fa:	4628      	mov	r0, r5
 80039fc:	f7fc fbf0 	bl	80001e0 <memchr>
 8003a00:	b108      	cbz	r0, 8003a06 <_printf_i+0x1da>
 8003a02:	1b40      	subs	r0, r0, r5
 8003a04:	6060      	str	r0, [r4, #4]
 8003a06:	6863      	ldr	r3, [r4, #4]
 8003a08:	6123      	str	r3, [r4, #16]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a10:	e79f      	b.n	8003952 <_printf_i+0x126>
 8003a12:	6923      	ldr	r3, [r4, #16]
 8003a14:	462a      	mov	r2, r5
 8003a16:	4639      	mov	r1, r7
 8003a18:	4630      	mov	r0, r6
 8003a1a:	47c0      	blx	r8
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d0a2      	beq.n	8003966 <_printf_i+0x13a>
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	079b      	lsls	r3, r3, #30
 8003a24:	d507      	bpl.n	8003a36 <_printf_i+0x20a>
 8003a26:	2500      	movs	r5, #0
 8003a28:	f104 0919 	add.w	r9, r4, #25
 8003a2c:	68e3      	ldr	r3, [r4, #12]
 8003a2e:	9a03      	ldr	r2, [sp, #12]
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	429d      	cmp	r5, r3
 8003a34:	db05      	blt.n	8003a42 <_printf_i+0x216>
 8003a36:	68e0      	ldr	r0, [r4, #12]
 8003a38:	9b03      	ldr	r3, [sp, #12]
 8003a3a:	4298      	cmp	r0, r3
 8003a3c:	bfb8      	it	lt
 8003a3e:	4618      	movlt	r0, r3
 8003a40:	e793      	b.n	800396a <_printf_i+0x13e>
 8003a42:	2301      	movs	r3, #1
 8003a44:	464a      	mov	r2, r9
 8003a46:	4639      	mov	r1, r7
 8003a48:	4630      	mov	r0, r6
 8003a4a:	47c0      	blx	r8
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d08a      	beq.n	8003966 <_printf_i+0x13a>
 8003a50:	3501      	adds	r5, #1
 8003a52:	e7eb      	b.n	8003a2c <_printf_i+0x200>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1a7      	bne.n	80039a8 <_printf_i+0x17c>
 8003a58:	780b      	ldrb	r3, [r1, #0]
 8003a5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a62:	e765      	b.n	8003930 <_printf_i+0x104>
 8003a64:	08003c50 	.word	0x08003c50
 8003a68:	08003c3f 	.word	0x08003c3f

08003a6c <_sbrk_r>:
 8003a6c:	b538      	push	{r3, r4, r5, lr}
 8003a6e:	4c06      	ldr	r4, [pc, #24]	; (8003a88 <_sbrk_r+0x1c>)
 8003a70:	2300      	movs	r3, #0
 8003a72:	4605      	mov	r5, r0
 8003a74:	4608      	mov	r0, r1
 8003a76:	6023      	str	r3, [r4, #0]
 8003a78:	f7ff fb00 	bl	800307c <_sbrk>
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	d102      	bne.n	8003a86 <_sbrk_r+0x1a>
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	b103      	cbz	r3, 8003a86 <_sbrk_r+0x1a>
 8003a84:	602b      	str	r3, [r5, #0]
 8003a86:	bd38      	pop	{r3, r4, r5, pc}
 8003a88:	200001e0 	.word	0x200001e0

08003a8c <memcpy>:
 8003a8c:	b510      	push	{r4, lr}
 8003a8e:	1e43      	subs	r3, r0, #1
 8003a90:	440a      	add	r2, r1
 8003a92:	4291      	cmp	r1, r2
 8003a94:	d100      	bne.n	8003a98 <memcpy+0xc>
 8003a96:	bd10      	pop	{r4, pc}
 8003a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003aa0:	e7f7      	b.n	8003a92 <memcpy+0x6>

08003aa2 <memmove>:
 8003aa2:	4288      	cmp	r0, r1
 8003aa4:	b510      	push	{r4, lr}
 8003aa6:	eb01 0302 	add.w	r3, r1, r2
 8003aaa:	d803      	bhi.n	8003ab4 <memmove+0x12>
 8003aac:	1e42      	subs	r2, r0, #1
 8003aae:	4299      	cmp	r1, r3
 8003ab0:	d10c      	bne.n	8003acc <memmove+0x2a>
 8003ab2:	bd10      	pop	{r4, pc}
 8003ab4:	4298      	cmp	r0, r3
 8003ab6:	d2f9      	bcs.n	8003aac <memmove+0xa>
 8003ab8:	1881      	adds	r1, r0, r2
 8003aba:	1ad2      	subs	r2, r2, r3
 8003abc:	42d3      	cmn	r3, r2
 8003abe:	d100      	bne.n	8003ac2 <memmove+0x20>
 8003ac0:	bd10      	pop	{r4, pc}
 8003ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ac6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003aca:	e7f7      	b.n	8003abc <memmove+0x1a>
 8003acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ad0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ad4:	e7eb      	b.n	8003aae <memmove+0xc>

08003ad6 <__malloc_lock>:
 8003ad6:	4770      	bx	lr

08003ad8 <__malloc_unlock>:
 8003ad8:	4770      	bx	lr

08003ada <_realloc_r>:
 8003ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003adc:	4607      	mov	r7, r0
 8003ade:	4614      	mov	r4, r2
 8003ae0:	460e      	mov	r6, r1
 8003ae2:	b921      	cbnz	r1, 8003aee <_realloc_r+0x14>
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003aea:	f7ff bc7b 	b.w	80033e4 <_malloc_r>
 8003aee:	b922      	cbnz	r2, 8003afa <_realloc_r+0x20>
 8003af0:	f7ff fc2a 	bl	8003348 <_free_r>
 8003af4:	4625      	mov	r5, r4
 8003af6:	4628      	mov	r0, r5
 8003af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003afa:	f000 f814 	bl	8003b26 <_malloc_usable_size_r>
 8003afe:	4284      	cmp	r4, r0
 8003b00:	d90f      	bls.n	8003b22 <_realloc_r+0x48>
 8003b02:	4621      	mov	r1, r4
 8003b04:	4638      	mov	r0, r7
 8003b06:	f7ff fc6d 	bl	80033e4 <_malloc_r>
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d0f2      	beq.n	8003af6 <_realloc_r+0x1c>
 8003b10:	4631      	mov	r1, r6
 8003b12:	4622      	mov	r2, r4
 8003b14:	f7ff ffba 	bl	8003a8c <memcpy>
 8003b18:	4631      	mov	r1, r6
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	f7ff fc14 	bl	8003348 <_free_r>
 8003b20:	e7e9      	b.n	8003af6 <_realloc_r+0x1c>
 8003b22:	4635      	mov	r5, r6
 8003b24:	e7e7      	b.n	8003af6 <_realloc_r+0x1c>

08003b26 <_malloc_usable_size_r>:
 8003b26:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	f1a0 0004 	sub.w	r0, r0, #4
 8003b30:	bfbc      	itt	lt
 8003b32:	580b      	ldrlt	r3, [r1, r0]
 8003b34:	18c0      	addlt	r0, r0, r3
 8003b36:	4770      	bx	lr

08003b38 <_gettimeofday>:
 8003b38:	4b02      	ldr	r3, [pc, #8]	; (8003b44 <_gettimeofday+0xc>)
 8003b3a:	2258      	movs	r2, #88	; 0x58
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b42:	4770      	bx	lr
 8003b44:	200001e0 	.word	0x200001e0

08003b48 <_init>:
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4a:	bf00      	nop
 8003b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4e:	bc08      	pop	{r3}
 8003b50:	469e      	mov	lr, r3
 8003b52:	4770      	bx	lr

08003b54 <_fini>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr
